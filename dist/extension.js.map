{"version":3,"file":"extension.js","mappings":"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","sources":[".././node_modules/@vscode/debugadapter/lib/debugSession.js",".././node_modules/@vscode/debugadapter/lib/handles.js",".././node_modules/@vscode/debugadapter/lib/internalLogger.js",".././node_modules/@vscode/debugadapter/lib/logger.js",".././node_modules/@vscode/debugadapter/lib/loggingDebugSession.js",".././node_modules/@vscode/debugadapter/lib/main.js",".././node_modules/@vscode/debugadapter/lib/messages.js",".././node_modules/@vscode/debugadapter/lib/protocol.js",".././node_modules/@vscode/debugadapter/lib/runDebugAdapter.js",".././src/debugger/activate.ts",".././src/debugger/configuration.ts",".././src/debugger/errors.ts",".././src/debugger/factory.ts",".././src/debugger/runtime.ts",".././src/debugger/session.ts",".././src/debugger/utils/index.ts",".././src/debugger/utils/notify.ts",".././src/language/activate.ts",".././src/language/symbols.ts",".././src/logging.ts","../external commonjs \"vscode\"","../external node-commonjs \"child_process\"","../external node-commonjs \"events\"","../external node-commonjs \"fs\"","../external node-commonjs \"net\"","../external node-commonjs \"os\"","../external node-commonjs \"path\"","../external node-commonjs \"url\"",".././node_modules/async/dist/async.mjs","../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object",".././src/extension.ts"],"sourcesContent":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DebugSession = exports.ErrorDestination = exports.MemoryEvent = exports.InvalidatedEvent = exports.ProgressEndEvent = exports.ProgressUpdateEvent = exports.ProgressStartEvent = exports.CapabilitiesEvent = exports.LoadedSourceEvent = exports.ModuleEvent = exports.BreakpointEvent = exports.ThreadEvent = exports.OutputEvent = exports.ExitedEvent = exports.TerminatedEvent = exports.InitializedEvent = exports.ContinuedEvent = exports.StoppedEvent = exports.CompletionItem = exports.Module = exports.Breakpoint = exports.Variable = exports.Thread = exports.StackFrame = exports.Scope = exports.Source = void 0;\nconst protocol_1 = require(\"./protocol\");\nconst messages_1 = require(\"./messages\");\nconst runDebugAdapter_1 = require(\"./runDebugAdapter\");\nconst url_1 = require(\"url\");\nclass Source {\n    constructor(name, path, id = 0, origin, data) {\n        this.name = name;\n        this.path = path;\n        this.sourceReference = id;\n        if (origin) {\n            this.origin = origin;\n        }\n        if (data) {\n            this.adapterData = data;\n        }\n    }\n}\nexports.Source = Source;\nclass Scope {\n    constructor(name, reference, expensive = false) {\n        this.name = name;\n        this.variablesReference = reference;\n        this.expensive = expensive;\n    }\n}\nexports.Scope = Scope;\nclass StackFrame {\n    constructor(i, nm, src, ln = 0, col = 0) {\n        this.id = i;\n        this.source = src;\n        this.line = ln;\n        this.column = col;\n        this.name = nm;\n    }\n}\nexports.StackFrame = StackFrame;\nclass Thread {\n    constructor(id, name) {\n        this.id = id;\n        if (name) {\n            this.name = name;\n        }\n        else {\n            this.name = 'Thread #' + id;\n        }\n    }\n}\nexports.Thread = Thread;\nclass Variable {\n    constructor(name, value, ref = 0, indexedVariables, namedVariables) {\n        this.name = name;\n        this.value = value;\n        this.variablesReference = ref;\n        if (typeof namedVariables === 'number') {\n            this.namedVariables = namedVariables;\n        }\n        if (typeof indexedVariables === 'number') {\n            this.indexedVariables = indexedVariables;\n        }\n    }\n}\nexports.Variable = Variable;\nclass Breakpoint {\n    constructor(verified, line, column, source) {\n        this.verified = verified;\n        const e = this;\n        if (typeof line === 'number') {\n            e.line = line;\n        }\n        if (typeof column === 'number') {\n            e.column = column;\n        }\n        if (source) {\n            e.source = source;\n        }\n    }\n    setId(id) {\n        this.id = id;\n    }\n}\nexports.Breakpoint = Breakpoint;\nclass Module {\n    constructor(id, name) {\n        this.id = id;\n        this.name = name;\n    }\n}\nexports.Module = Module;\nclass CompletionItem {\n    constructor(label, start, length = 0) {\n        this.label = label;\n        this.start = start;\n        this.length = length;\n    }\n}\nexports.CompletionItem = CompletionItem;\nclass StoppedEvent extends messages_1.Event {\n    constructor(reason, threadId, exceptionText) {\n        super('stopped');\n        this.body = {\n            reason: reason\n        };\n        if (typeof threadId === 'number') {\n            this.body.threadId = threadId;\n        }\n        if (typeof exceptionText === 'string') {\n            this.body.text = exceptionText;\n        }\n    }\n}\nexports.StoppedEvent = StoppedEvent;\nclass ContinuedEvent extends messages_1.Event {\n    constructor(threadId, allThreadsContinued) {\n        super('continued');\n        this.body = {\n            threadId: threadId\n        };\n        if (typeof allThreadsContinued === 'boolean') {\n            this.body.allThreadsContinued = allThreadsContinued;\n        }\n    }\n}\nexports.ContinuedEvent = ContinuedEvent;\nclass InitializedEvent extends messages_1.Event {\n    constructor() {\n        super('initialized');\n    }\n}\nexports.InitializedEvent = InitializedEvent;\nclass TerminatedEvent extends messages_1.Event {\n    constructor(restart) {\n        super('terminated');\n        if (typeof restart === 'boolean' || restart) {\n            const e = this;\n            e.body = {\n                restart: restart\n            };\n        }\n    }\n}\nexports.TerminatedEvent = TerminatedEvent;\nclass ExitedEvent extends messages_1.Event {\n    constructor(exitCode) {\n        super('exited');\n        this.body = {\n            exitCode: exitCode\n        };\n    }\n}\nexports.ExitedEvent = ExitedEvent;\nclass OutputEvent extends messages_1.Event {\n    constructor(output, category = 'console', data) {\n        super('output');\n        this.body = {\n            category: category,\n            output: output\n        };\n        if (data !== undefined) {\n            this.body.data = data;\n        }\n    }\n}\nexports.OutputEvent = OutputEvent;\nclass ThreadEvent extends messages_1.Event {\n    constructor(reason, threadId) {\n        super('thread');\n        this.body = {\n            reason: reason,\n            threadId: threadId\n        };\n    }\n}\nexports.ThreadEvent = ThreadEvent;\nclass BreakpointEvent extends messages_1.Event {\n    constructor(reason, breakpoint) {\n        super('breakpoint');\n        this.body = {\n            reason: reason,\n            breakpoint: breakpoint\n        };\n    }\n}\nexports.BreakpointEvent = BreakpointEvent;\nclass ModuleEvent extends messages_1.Event {\n    constructor(reason, module) {\n        super('module');\n        this.body = {\n            reason: reason,\n            module: module\n        };\n    }\n}\nexports.ModuleEvent = ModuleEvent;\nclass LoadedSourceEvent extends messages_1.Event {\n    constructor(reason, source) {\n        super('loadedSource');\n        this.body = {\n            reason: reason,\n            source: source\n        };\n    }\n}\nexports.LoadedSourceEvent = LoadedSourceEvent;\nclass CapabilitiesEvent extends messages_1.Event {\n    constructor(capabilities) {\n        super('capabilities');\n        this.body = {\n            capabilities: capabilities\n        };\n    }\n}\nexports.CapabilitiesEvent = CapabilitiesEvent;\nclass ProgressStartEvent extends messages_1.Event {\n    constructor(progressId, title, message) {\n        super('progressStart');\n        this.body = {\n            progressId: progressId,\n            title: title\n        };\n        if (typeof message === 'string') {\n            this.body.message = message;\n        }\n    }\n}\nexports.ProgressStartEvent = ProgressStartEvent;\nclass ProgressUpdateEvent extends messages_1.Event {\n    constructor(progressId, message) {\n        super('progressUpdate');\n        this.body = {\n            progressId: progressId\n        };\n        if (typeof message === 'string') {\n            this.body.message = message;\n        }\n    }\n}\nexports.ProgressUpdateEvent = ProgressUpdateEvent;\nclass ProgressEndEvent extends messages_1.Event {\n    constructor(progressId, message) {\n        super('progressEnd');\n        this.body = {\n            progressId: progressId\n        };\n        if (typeof message === 'string') {\n            this.body.message = message;\n        }\n    }\n}\nexports.ProgressEndEvent = ProgressEndEvent;\nclass InvalidatedEvent extends messages_1.Event {\n    constructor(areas, threadId, stackFrameId) {\n        super('invalidated');\n        this.body = {};\n        if (areas) {\n            this.body.areas = areas;\n        }\n        if (threadId) {\n            this.body.threadId = threadId;\n        }\n        if (stackFrameId) {\n            this.body.stackFrameId = stackFrameId;\n        }\n    }\n}\nexports.InvalidatedEvent = InvalidatedEvent;\nclass MemoryEvent extends messages_1.Event {\n    constructor(memoryReference, offset, count) {\n        super('memory');\n        this.body = { memoryReference, offset, count };\n    }\n}\nexports.MemoryEvent = MemoryEvent;\nvar ErrorDestination;\n(function (ErrorDestination) {\n    ErrorDestination[ErrorDestination[\"User\"] = 1] = \"User\";\n    ErrorDestination[ErrorDestination[\"Telemetry\"] = 2] = \"Telemetry\";\n})(ErrorDestination = exports.ErrorDestination || (exports.ErrorDestination = {}));\n;\nclass DebugSession extends protocol_1.ProtocolServer {\n    constructor(obsolete_debuggerLinesAndColumnsStartAt1, obsolete_isServer) {\n        super();\n        const linesAndColumnsStartAt1 = typeof obsolete_debuggerLinesAndColumnsStartAt1 === 'boolean' ? obsolete_debuggerLinesAndColumnsStartAt1 : false;\n        this._debuggerLinesStartAt1 = linesAndColumnsStartAt1;\n        this._debuggerColumnsStartAt1 = linesAndColumnsStartAt1;\n        this._debuggerPathsAreURIs = false;\n        this._clientLinesStartAt1 = true;\n        this._clientColumnsStartAt1 = true;\n        this._clientPathsAreURIs = false;\n        this._isServer = typeof obsolete_isServer === 'boolean' ? obsolete_isServer : false;\n        this.on('close', () => {\n            this.shutdown();\n        });\n        this.on('error', (error) => {\n            this.shutdown();\n        });\n    }\n    setDebuggerPathFormat(format) {\n        this._debuggerPathsAreURIs = format !== 'path';\n    }\n    setDebuggerLinesStartAt1(enable) {\n        this._debuggerLinesStartAt1 = enable;\n    }\n    setDebuggerColumnsStartAt1(enable) {\n        this._debuggerColumnsStartAt1 = enable;\n    }\n    setRunAsServer(enable) {\n        this._isServer = enable;\n    }\n    /**\n     * A virtual constructor...\n     */\n    static run(debugSession) {\n        (0, runDebugAdapter_1.runDebugAdapter)(debugSession);\n    }\n    shutdown() {\n        if (this._isServer || this._isRunningInline()) {\n            // shutdown ignored in server mode\n        }\n        else {\n            // wait a bit before shutting down\n            setTimeout(() => {\n                process.exit(0);\n            }, 100);\n        }\n    }\n    sendErrorResponse(response, codeOrMessage, format, variables, dest = ErrorDestination.User) {\n        let msg;\n        if (typeof codeOrMessage === 'number') {\n            msg = {\n                id: codeOrMessage,\n                format: format\n            };\n            if (variables) {\n                msg.variables = variables;\n            }\n            if (dest & ErrorDestination.User) {\n                msg.showUser = true;\n            }\n            if (dest & ErrorDestination.Telemetry) {\n                msg.sendTelemetry = true;\n            }\n        }\n        else {\n            msg = codeOrMessage;\n        }\n        response.success = false;\n        response.message = DebugSession.formatPII(msg.format, true, msg.variables);\n        if (!response.body) {\n            response.body = {};\n        }\n        response.body.error = msg;\n        this.sendResponse(response);\n    }\n    runInTerminalRequest(args, timeout, cb) {\n        this.sendRequest('runInTerminal', args, timeout, cb);\n    }\n    dispatchRequest(request) {\n        const response = new messages_1.Response(request);\n        try {\n            if (request.command === 'initialize') {\n                var args = request.arguments;\n                if (typeof args.linesStartAt1 === 'boolean') {\n                    this._clientLinesStartAt1 = args.linesStartAt1;\n                }\n                if (typeof args.columnsStartAt1 === 'boolean') {\n                    this._clientColumnsStartAt1 = args.columnsStartAt1;\n                }\n                if (args.pathFormat !== 'path') {\n                    this.sendErrorResponse(response, 2018, 'debug adapter only supports native paths', null, ErrorDestination.Telemetry);\n                }\n                else {\n                    const initializeResponse = response;\n                    initializeResponse.body = {};\n                    this.initializeRequest(initializeResponse, args);\n                }\n            }\n            else if (request.command === 'launch') {\n                this.launchRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'attach') {\n                this.attachRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'disconnect') {\n                this.disconnectRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'terminate') {\n                this.terminateRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'restart') {\n                this.restartRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'setBreakpoints') {\n                this.setBreakPointsRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'setFunctionBreakpoints') {\n                this.setFunctionBreakPointsRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'setExceptionBreakpoints') {\n                this.setExceptionBreakPointsRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'configurationDone') {\n                this.configurationDoneRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'continue') {\n                this.continueRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'next') {\n                this.nextRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'stepIn') {\n                this.stepInRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'stepOut') {\n                this.stepOutRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'stepBack') {\n                this.stepBackRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'reverseContinue') {\n                this.reverseContinueRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'restartFrame') {\n                this.restartFrameRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'goto') {\n                this.gotoRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'pause') {\n                this.pauseRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'stackTrace') {\n                this.stackTraceRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'scopes') {\n                this.scopesRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'variables') {\n                this.variablesRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'setVariable') {\n                this.setVariableRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'setExpression') {\n                this.setExpressionRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'source') {\n                this.sourceRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'threads') {\n                this.threadsRequest(response, request);\n            }\n            else if (request.command === 'terminateThreads') {\n                this.terminateThreadsRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'evaluate') {\n                this.evaluateRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'stepInTargets') {\n                this.stepInTargetsRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'gotoTargets') {\n                this.gotoTargetsRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'completions') {\n                this.completionsRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'exceptionInfo') {\n                this.exceptionInfoRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'loadedSources') {\n                this.loadedSourcesRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'dataBreakpointInfo') {\n                this.dataBreakpointInfoRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'setDataBreakpoints') {\n                this.setDataBreakpointsRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'readMemory') {\n                this.readMemoryRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'writeMemory') {\n                this.writeMemoryRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'disassemble') {\n                this.disassembleRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'cancel') {\n                this.cancelRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'breakpointLocations') {\n                this.breakpointLocationsRequest(response, request.arguments, request);\n            }\n            else if (request.command === 'setInstructionBreakpoints') {\n                this.setInstructionBreakpointsRequest(response, request.arguments, request);\n            }\n            else {\n                this.customRequest(request.command, response, request.arguments, request);\n            }\n        }\n        catch (e) {\n            this.sendErrorResponse(response, 1104, '{_stack}', { _exception: e.message, _stack: e.stack }, ErrorDestination.Telemetry);\n        }\n    }\n    initializeRequest(response, args) {\n        // This default debug adapter does not support conditional breakpoints.\n        response.body.supportsConditionalBreakpoints = false;\n        // This default debug adapter does not support hit conditional breakpoints.\n        response.body.supportsHitConditionalBreakpoints = false;\n        // This default debug adapter does not support function breakpoints.\n        response.body.supportsFunctionBreakpoints = false;\n        // This default debug adapter implements the 'configurationDone' request.\n        response.body.supportsConfigurationDoneRequest = true;\n        // This default debug adapter does not support hovers based on the 'evaluate' request.\n        response.body.supportsEvaluateForHovers = false;\n        // This default debug adapter does not support the 'stepBack' request.\n        response.body.supportsStepBack = false;\n        // This default debug adapter does not support the 'setVariable' request.\n        response.body.supportsSetVariable = false;\n        // This default debug adapter does not support the 'restartFrame' request.\n        response.body.supportsRestartFrame = false;\n        // This default debug adapter does not support the 'stepInTargets' request.\n        response.body.supportsStepInTargetsRequest = false;\n        // This default debug adapter does not support the 'gotoTargets' request.\n        response.body.supportsGotoTargetsRequest = false;\n        // This default debug adapter does not support the 'completions' request.\n        response.body.supportsCompletionsRequest = false;\n        // This default debug adapter does not support the 'restart' request.\n        response.body.supportsRestartRequest = false;\n        // This default debug adapter does not support the 'exceptionOptions' attribute on the 'setExceptionBreakpoints' request.\n        response.body.supportsExceptionOptions = false;\n        // This default debug adapter does not support the 'format' attribute on the 'variables', 'evaluate', and 'stackTrace' request.\n        response.body.supportsValueFormattingOptions = false;\n        // This debug adapter does not support the 'exceptionInfo' request.\n        response.body.supportsExceptionInfoRequest = false;\n        // This debug adapter does not support the 'TerminateDebuggee' attribute on the 'disconnect' request.\n        response.body.supportTerminateDebuggee = false;\n        // This debug adapter does not support delayed loading of stack frames.\n        response.body.supportsDelayedStackTraceLoading = false;\n        // This debug adapter does not support the 'loadedSources' request.\n        response.body.supportsLoadedSourcesRequest = false;\n        // This debug adapter does not support the 'logMessage' attribute of the SourceBreakpoint.\n        response.body.supportsLogPoints = false;\n        // This debug adapter does not support the 'terminateThreads' request.\n        response.body.supportsTerminateThreadsRequest = false;\n        // This debug adapter does not support the 'setExpression' request.\n        response.body.supportsSetExpression = false;\n        // This debug adapter does not support the 'terminate' request.\n        response.body.supportsTerminateRequest = false;\n        // This debug adapter does not support data breakpoints.\n        response.body.supportsDataBreakpoints = false;\n        /** This debug adapter does not support the 'readMemory' request. */\n        response.body.supportsReadMemoryRequest = false;\n        /** The debug adapter does not support the 'disassemble' request. */\n        response.body.supportsDisassembleRequest = false;\n        /** The debug adapter does not support the 'cancel' request. */\n        response.body.supportsCancelRequest = false;\n        /** The debug adapter does not support the 'breakpointLocations' request. */\n        response.body.supportsBreakpointLocationsRequest = false;\n        /** The debug adapter does not support the 'clipboard' context value in the 'evaluate' request. */\n        response.body.supportsClipboardContext = false;\n        /** The debug adapter does not support stepping granularities for the stepping requests. */\n        response.body.supportsSteppingGranularity = false;\n        /** The debug adapter does not support the 'setInstructionBreakpoints' request. */\n        response.body.supportsInstructionBreakpoints = false;\n        /** The debug adapter does not support 'filterOptions' on the 'setExceptionBreakpoints' request. */\n        response.body.supportsExceptionFilterOptions = false;\n        this.sendResponse(response);\n    }\n    disconnectRequest(response, args, request) {\n        this.sendResponse(response);\n        this.shutdown();\n    }\n    launchRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    attachRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    terminateRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    restartRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    setBreakPointsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    setFunctionBreakPointsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    setExceptionBreakPointsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    configurationDoneRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    continueRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    nextRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    stepInRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    stepOutRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    stepBackRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    reverseContinueRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    restartFrameRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    gotoRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    pauseRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    sourceRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    threadsRequest(response, request) {\n        this.sendResponse(response);\n    }\n    terminateThreadsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    stackTraceRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    scopesRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    variablesRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    setVariableRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    setExpressionRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    evaluateRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    stepInTargetsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    gotoTargetsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    completionsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    exceptionInfoRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    loadedSourcesRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    dataBreakpointInfoRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    setDataBreakpointsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    readMemoryRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    writeMemoryRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    disassembleRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    cancelRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    breakpointLocationsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    setInstructionBreakpointsRequest(response, args, request) {\n        this.sendResponse(response);\n    }\n    /**\n     * Override this hook to implement custom requests.\n     */\n    customRequest(command, response, args, request) {\n        this.sendErrorResponse(response, 1014, 'unrecognized request', null, ErrorDestination.Telemetry);\n    }\n    //---- protected -------------------------------------------------------------------------------------------------\n    convertClientLineToDebugger(line) {\n        if (this._debuggerLinesStartAt1) {\n            return this._clientLinesStartAt1 ? line : line + 1;\n        }\n        return this._clientLinesStartAt1 ? line - 1 : line;\n    }\n    convertDebuggerLineToClient(line) {\n        if (this._debuggerLinesStartAt1) {\n            return this._clientLinesStartAt1 ? line : line - 1;\n        }\n        return this._clientLinesStartAt1 ? line + 1 : line;\n    }\n    convertClientColumnToDebugger(column) {\n        if (this._debuggerColumnsStartAt1) {\n            return this._clientColumnsStartAt1 ? column : column + 1;\n        }\n        return this._clientColumnsStartAt1 ? column - 1 : column;\n    }\n    convertDebuggerColumnToClient(column) {\n        if (this._debuggerColumnsStartAt1) {\n            return this._clientColumnsStartAt1 ? column : column - 1;\n        }\n        return this._clientColumnsStartAt1 ? column + 1 : column;\n    }\n    convertClientPathToDebugger(clientPath) {\n        if (this._clientPathsAreURIs !== this._debuggerPathsAreURIs) {\n            if (this._clientPathsAreURIs) {\n                return DebugSession.uri2path(clientPath);\n            }\n            else {\n                return DebugSession.path2uri(clientPath);\n            }\n        }\n        return clientPath;\n    }\n    convertDebuggerPathToClient(debuggerPath) {\n        if (this._debuggerPathsAreURIs !== this._clientPathsAreURIs) {\n            if (this._debuggerPathsAreURIs) {\n                return DebugSession.uri2path(debuggerPath);\n            }\n            else {\n                return DebugSession.path2uri(debuggerPath);\n            }\n        }\n        return debuggerPath;\n    }\n    //---- private -------------------------------------------------------------------------------\n    static path2uri(path) {\n        if (process.platform === 'win32') {\n            if (/^[A-Z]:/.test(path)) {\n                path = path[0].toLowerCase() + path.substr(1);\n            }\n            path = path.replace(/\\\\/g, '/');\n        }\n        path = encodeURI(path);\n        let uri = new url_1.URL(`file:`); // ignore 'path' for now\n        uri.pathname = path; // now use 'path' to get the correct percent encoding (see https://url.spec.whatwg.org)\n        return uri.toString();\n    }\n    static uri2path(sourceUri) {\n        let uri = new url_1.URL(sourceUri);\n        let s = decodeURIComponent(uri.pathname);\n        if (process.platform === 'win32') {\n            if (/^\\/[a-zA-Z]:/.test(s)) {\n                s = s[1].toLowerCase() + s.substr(2);\n            }\n            s = s.replace(/\\//g, '\\\\');\n        }\n        return s;\n    }\n    /*\n    * If argument starts with '_' it is OK to send its value to telemetry.\n    */\n    static formatPII(format, excludePII, args) {\n        return format.replace(DebugSession._formatPIIRegexp, function (match, paramName) {\n            if (excludePII && paramName.length > 0 && paramName[0] !== '_') {\n                return match;\n            }\n            return args[paramName] && args.hasOwnProperty(paramName) ?\n                args[paramName] :\n                match;\n        });\n    }\n}\nexports.DebugSession = DebugSession;\nDebugSession._formatPIIRegexp = /{([^}]+)}/g;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Handles = void 0;\nclass Handles {\n    constructor(startHandle) {\n        this.START_HANDLE = 1000;\n        this._handleMap = new Map();\n        this._nextHandle = typeof startHandle === 'number' ? startHandle : this.START_HANDLE;\n    }\n    reset() {\n        this._nextHandle = this.START_HANDLE;\n        this._handleMap = new Map();\n    }\n    create(value) {\n        var handle = this._nextHandle++;\n        this._handleMap.set(handle, value);\n        return handle;\n    }\n    get(handle, dflt) {\n        return this._handleMap.get(handle) || dflt;\n    }\n}\nexports.Handles = Handles;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYW5kbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O2dHQUdnRzs7O0FBRWhHLE1BQWEsT0FBTztJQU9uQixZQUFtQixXQUFvQjtRQUwvQixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUdwQixlQUFVLEdBQUcsSUFBSSxHQUFHLEVBQWEsQ0FBQztRQUd6QyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sV0FBVyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQ3RGLENBQUM7SUFFTSxLQUFLO1FBQ1gsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQWEsQ0FBQztJQUN4QyxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQVE7UUFDckIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuQyxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFTSxHQUFHLENBQUMsTUFBYyxFQUFFLElBQVE7UUFDbEMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDNUMsQ0FBQztDQUNEO0FBekJELDBCQXlCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5leHBvcnQgY2xhc3MgSGFuZGxlczxUPiB7XG5cblx0cHJpdmF0ZSBTVEFSVF9IQU5ETEUgPSAxMDAwO1xuXG5cdHByaXZhdGUgX25leHRIYW5kbGUgOiBudW1iZXI7XG5cdHByaXZhdGUgX2hhbmRsZU1hcCA9IG5ldyBNYXA8bnVtYmVyLCBUPigpO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihzdGFydEhhbmRsZT86IG51bWJlcikge1xuXHRcdHRoaXMuX25leHRIYW5kbGUgPSB0eXBlb2Ygc3RhcnRIYW5kbGUgPT09ICdudW1iZXInID8gc3RhcnRIYW5kbGUgOiB0aGlzLlNUQVJUX0hBTkRMRTtcblx0fVxuXG5cdHB1YmxpYyByZXNldCgpOiB2b2lkIHtcblx0XHR0aGlzLl9uZXh0SGFuZGxlID0gdGhpcy5TVEFSVF9IQU5ETEU7XG5cdFx0dGhpcy5faGFuZGxlTWFwID0gbmV3IE1hcDxudW1iZXIsIFQ+KCk7XG5cdH1cblxuXHRwdWJsaWMgY3JlYXRlKHZhbHVlOiBUKTogbnVtYmVyIHtcblx0XHR2YXIgaGFuZGxlID0gdGhpcy5fbmV4dEhhbmRsZSsrO1xuXHRcdHRoaXMuX2hhbmRsZU1hcC5zZXQoaGFuZGxlLCB2YWx1ZSk7XG5cdFx0cmV0dXJuIGhhbmRsZTtcblx0fVxuXG5cdHB1YmxpYyBnZXQoaGFuZGxlOiBudW1iZXIsIGRmbHQ/OiBUKTogVCB7XG5cdFx0cmV0dXJuIHRoaXMuX2hhbmRsZU1hcC5nZXQoaGFuZGxlKSB8fCBkZmx0O1xuXHR9XG59XG4iXX0=","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InternalLogger = void 0;\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst logger_1 = require(\"./logger\");\n/**\n * Manages logging, whether to console.log, file, or VS Code console.\n * Encapsulates the state specific to each logging session\n */\nclass InternalLogger {\n    constructor(logCallback, isServer) {\n        /** Dispose and allow exit to continue normally */\n        this.beforeExitCallback = () => this.dispose();\n        this._logCallback = logCallback;\n        this._logToConsole = isServer;\n        this._minLogLevel = logger_1.LogLevel.Warn;\n        this.disposeCallback = (signal, code) => {\n            this.dispose();\n            // Exit with 128 + value of the signal code.\n            // https://nodejs.org/api/process.html#process_exit_codes\n            code = code || 2; // SIGINT\n            code += 128;\n            process.exit(code);\n        };\n    }\n    async setup(options) {\n        this._minLogLevel = options.consoleMinLogLevel;\n        this._prependTimestamp = options.prependTimestamp;\n        // Open a log file in the specified location. Overwritten on each run.\n        if (options.logFilePath) {\n            if (!path.isAbsolute(options.logFilePath)) {\n                this.log(`logFilePath must be an absolute path: ${options.logFilePath}`, logger_1.LogLevel.Error);\n            }\n            else {\n                const handleError = (err) => this.sendLog(`Error creating log file at path: ${options.logFilePath}. Error: ${err.toString()}\\n`, logger_1.LogLevel.Error);\n                try {\n                    await fs.promises.mkdir(path.dirname(options.logFilePath), { recursive: true });\n                    this.log(`Verbose logs are written to:\\n`, logger_1.LogLevel.Warn);\n                    this.log(options.logFilePath + '\\n', logger_1.LogLevel.Warn);\n                    this._logFileStream = fs.createWriteStream(options.logFilePath);\n                    this.logDateTime();\n                    this.setupShutdownListeners();\n                    this._logFileStream.on('error', err => {\n                        handleError(err);\n                    });\n                }\n                catch (err) {\n                    handleError(err);\n                }\n            }\n        }\n    }\n    logDateTime() {\n        let d = new Date();\n        let dateString = d.getUTCFullYear() + '-' + `${d.getUTCMonth() + 1}` + '-' + d.getUTCDate();\n        const timeAndDateStamp = dateString + ', ' + getFormattedTimeString();\n        this.log(timeAndDateStamp + '\\n', logger_1.LogLevel.Verbose, false);\n    }\n    setupShutdownListeners() {\n        process.on('beforeExit', this.beforeExitCallback);\n        process.on('SIGTERM', this.disposeCallback);\n        process.on('SIGINT', this.disposeCallback);\n    }\n    removeShutdownListeners() {\n        process.removeListener('beforeExit', this.beforeExitCallback);\n        process.removeListener('SIGTERM', this.disposeCallback);\n        process.removeListener('SIGINT', this.disposeCallback);\n    }\n    dispose() {\n        return new Promise(resolve => {\n            this.removeShutdownListeners();\n            if (this._logFileStream) {\n                this._logFileStream.end(resolve);\n                this._logFileStream = null;\n            }\n            else {\n                resolve();\n            }\n        });\n    }\n    log(msg, level, prependTimestamp = true) {\n        if (this._minLogLevel === logger_1.LogLevel.Stop) {\n            return;\n        }\n        if (level >= this._minLogLevel) {\n            this.sendLog(msg, level);\n        }\n        if (this._logToConsole) {\n            const logFn = level === logger_1.LogLevel.Error ? console.error :\n                level === logger_1.LogLevel.Warn ? console.warn :\n                    null;\n            if (logFn) {\n                logFn((0, logger_1.trimLastNewline)(msg));\n            }\n        }\n        // If an error, prepend with '[Error]'\n        if (level === logger_1.LogLevel.Error) {\n            msg = `[${logger_1.LogLevel[level]}] ${msg}`;\n        }\n        if (this._prependTimestamp && prependTimestamp) {\n            msg = '[' + getFormattedTimeString() + '] ' + msg;\n        }\n        if (this._logFileStream) {\n            this._logFileStream.write(msg);\n        }\n    }\n    sendLog(msg, level) {\n        // Truncate long messages, they can hang VS Code\n        if (msg.length > 1500) {\n            const endsInNewline = !!msg.match(/(\\n|\\r\\n)$/);\n            msg = msg.substr(0, 1500) + '[...]';\n            if (endsInNewline) {\n                msg = msg + '\\n';\n            }\n        }\n        if (this._logCallback) {\n            const event = new logger_1.LogOutputEvent(msg, level);\n            this._logCallback(event);\n        }\n    }\n}\nexports.InternalLogger = InternalLogger;\nfunction getFormattedTimeString() {\n    let d = new Date();\n    let hourString = _padZeroes(2, String(d.getUTCHours()));\n    let minuteString = _padZeroes(2, String(d.getUTCMinutes()));\n    let secondString = _padZeroes(2, String(d.getUTCSeconds()));\n    let millisecondString = _padZeroes(3, String(d.getUTCMilliseconds()));\n    return hourString + ':' + minuteString + ':' + secondString + '.' + millisecondString + ' UTC';\n}\nfunction _padZeroes(minDesiredLength, numberToPad) {\n    if (numberToPad.length >= minDesiredLength) {\n        return numberToPad;\n    }\n    else {\n        return String('0'.repeat(minDesiredLength) + numberToPad).slice(-minDesiredLength);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trimLastNewline = exports.LogOutputEvent = exports.logger = exports.Logger = exports.LogLevel = void 0;\nconst internalLogger_1 = require(\"./internalLogger\");\nconst debugSession_1 = require(\"./debugSession\");\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"Verbose\"] = 0] = \"Verbose\";\n    LogLevel[LogLevel[\"Log\"] = 1] = \"Log\";\n    LogLevel[LogLevel[\"Warn\"] = 2] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 3] = \"Error\";\n    LogLevel[LogLevel[\"Stop\"] = 4] = \"Stop\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\nclass Logger {\n    constructor() {\n        this._pendingLogQ = [];\n    }\n    log(msg, level = LogLevel.Log) {\n        msg = msg + '\\n';\n        this._write(msg, level);\n    }\n    verbose(msg) {\n        this.log(msg, LogLevel.Verbose);\n    }\n    warn(msg) {\n        this.log(msg, LogLevel.Warn);\n    }\n    error(msg) {\n        this.log(msg, LogLevel.Error);\n    }\n    dispose() {\n        if (this._currentLogger) {\n            const disposeP = this._currentLogger.dispose();\n            this._currentLogger = null;\n            return disposeP;\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    /**\n     * `log` adds a newline, `write` doesn't\n     */\n    _write(msg, level = LogLevel.Log) {\n        // [null, undefined] => string\n        msg = msg + '';\n        if (this._pendingLogQ) {\n            this._pendingLogQ.push({ msg, level });\n        }\n        else if (this._currentLogger) {\n            this._currentLogger.log(msg, level);\n        }\n    }\n    /**\n     * Set the logger's minimum level to log in the console, and whether to log to the file. Log messages are queued before this is\n     * called the first time, because minLogLevel defaults to Warn.\n     */\n    setup(consoleMinLogLevel, _logFilePath, prependTimestamp = true) {\n        const logFilePath = typeof _logFilePath === 'string' ?\n            _logFilePath :\n            (_logFilePath && this._logFilePathFromInit);\n        if (this._currentLogger) {\n            const options = {\n                consoleMinLogLevel,\n                logFilePath,\n                prependTimestamp\n            };\n            this._currentLogger.setup(options).then(() => {\n                // Now that we have a minimum logLevel, we can clear out the queue of pending messages\n                if (this._pendingLogQ) {\n                    const logQ = this._pendingLogQ;\n                    this._pendingLogQ = null;\n                    logQ.forEach(item => this._write(item.msg, item.level));\n                }\n            });\n        }\n    }\n    init(logCallback, logFilePath, logToConsole) {\n        // Re-init, create new global Logger\n        this._pendingLogQ = this._pendingLogQ || [];\n        this._currentLogger = new internalLogger_1.InternalLogger(logCallback, logToConsole);\n        this._logFilePathFromInit = logFilePath;\n    }\n}\nexports.Logger = Logger;\nexports.logger = new Logger();\nclass LogOutputEvent extends debugSession_1.OutputEvent {\n    constructor(msg, level) {\n        const category = level === LogLevel.Error ? 'stderr' :\n            level === LogLevel.Warn ? 'console' :\n                'stdout';\n        super(msg, category);\n    }\n}\nexports.LogOutputEvent = LogOutputEvent;\nfunction trimLastNewline(str) {\n    return str.replace(/(\\n|\\r\\n)$/, '');\n}\nexports.trimLastNewline = trimLastNewline;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggingDebugSession = void 0;\nconst Logger = require(\"./logger\");\nconst logger = Logger.logger;\nconst debugSession_1 = require(\"./debugSession\");\nclass LoggingDebugSession extends debugSession_1.DebugSession {\n    constructor(obsolete_logFilePath, obsolete_debuggerLinesAndColumnsStartAt1, obsolete_isServer) {\n        super(obsolete_debuggerLinesAndColumnsStartAt1, obsolete_isServer);\n        this.obsolete_logFilePath = obsolete_logFilePath;\n        this.on('error', (event) => {\n            logger.error(event.body);\n        });\n    }\n    start(inStream, outStream) {\n        super.start(inStream, outStream);\n        logger.init(e => this.sendEvent(e), this.obsolete_logFilePath, this._isServer);\n    }\n    /**\n     * Overload sendEvent to log\n     */\n    sendEvent(event) {\n        if (!(event instanceof Logger.LogOutputEvent)) {\n            // Don't create an infinite loop...\n            let objectToLog = event;\n            if (event instanceof debugSession_1.OutputEvent && event.body && event.body.data && event.body.data.doNotLogOutput) {\n                delete event.body.data.doNotLogOutput;\n                objectToLog = { ...event };\n                objectToLog.body = { ...event.body, output: '<output not logged>' };\n            }\n            logger.verbose(`To client: ${JSON.stringify(objectToLog)}`);\n        }\n        super.sendEvent(event);\n    }\n    /**\n     * Overload sendRequest to log\n     */\n    sendRequest(command, args, timeout, cb) {\n        logger.verbose(`To client: ${JSON.stringify(command)}(${JSON.stringify(args)}), timeout: ${timeout}`);\n        super.sendRequest(command, args, timeout, cb);\n    }\n    /**\n     * Overload sendResponse to log\n     */\n    sendResponse(response) {\n        logger.verbose(`To client: ${JSON.stringify(response)}`);\n        super.sendResponse(response);\n    }\n    dispatchRequest(request) {\n        logger.verbose(`From client: ${request.command}(${JSON.stringify(request.arguments)})`);\n        super.dispatchRequest(request);\n    }\n}\nexports.LoggingDebugSession = LoggingDebugSession;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZ0RlYnVnU2Vzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2dnaW5nRGVidWdTZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O2dHQUdnRzs7O0FBSWhHLG1DQUFtQztBQUNuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQzdCLGlEQUF5RDtBQUV6RCxNQUFhLG1CQUFvQixTQUFRLDJCQUFZO0lBQ3BELFlBQTJCLG9CQUE2QixFQUFFLHdDQUFrRCxFQUFFLGlCQUEyQjtRQUN4SSxLQUFLLENBQUMsd0NBQXdDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUR6Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQVM7UUFHdkQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUEwQixFQUFFLEVBQUU7WUFDL0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQStCLEVBQUUsU0FBZ0M7UUFDN0UsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQ7O09BRUc7SUFDSSxTQUFTLENBQUMsS0FBMEI7UUFDMUMsSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUM5QyxtQ0FBbUM7WUFFbkMsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLElBQUksS0FBSyxZQUFZLDBCQUFXLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ3BHLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO2dCQUN0QyxXQUFXLEdBQUcsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDO2dCQUMzQixXQUFXLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxDQUFBO2FBQ25FO1lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzVEO1FBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxXQUFXLENBQUMsT0FBZSxFQUFFLElBQVMsRUFBRSxPQUFlLEVBQUUsRUFBOEM7UUFDN0csTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZUFBZSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3RHLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksWUFBWSxDQUFDLFFBQWdDO1FBQ25ELE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6RCxLQUFLLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFUyxlQUFlLENBQUMsT0FBOEI7UUFDdkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUUsR0FBRyxDQUFDLENBQUM7UUFDekYsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0NBQ0Q7QUF0REQsa0RBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmltcG9ydCB7RGVidWdQcm90b2NvbH0gZnJvbSAnQHZzY29kZS9kZWJ1Z3Byb3RvY29sJztcblxuaW1wb3J0ICogYXMgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmNvbnN0IGxvZ2dlciA9IExvZ2dlci5sb2dnZXI7XG5pbXBvcnQge0RlYnVnU2Vzc2lvbiwgT3V0cHV0RXZlbnR9IGZyb20gJy4vZGVidWdTZXNzaW9uJztcblxuZXhwb3J0IGNsYXNzIExvZ2dpbmdEZWJ1Z1Nlc3Npb24gZXh0ZW5kcyBEZWJ1Z1Nlc3Npb24ge1xuXHRwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBvYnNvbGV0ZV9sb2dGaWxlUGF0aD86IHN0cmluZywgb2Jzb2xldGVfZGVidWdnZXJMaW5lc0FuZENvbHVtbnNTdGFydEF0MT86IGJvb2xlYW4sIG9ic29sZXRlX2lzU2VydmVyPzogYm9vbGVhbikge1xuXHRcdHN1cGVyKG9ic29sZXRlX2RlYnVnZ2VyTGluZXNBbmRDb2x1bW5zU3RhcnRBdDEsIG9ic29sZXRlX2lzU2VydmVyKTtcblxuXHRcdHRoaXMub24oJ2Vycm9yJywgKGV2ZW50OiBEZWJ1Z1Byb3RvY29sLkV2ZW50KSA9PiB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoZXZlbnQuYm9keSk7XG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgc3RhcnQoaW5TdHJlYW06IE5vZGVKUy5SZWFkYWJsZVN0cmVhbSwgb3V0U3RyZWFtOiBOb2RlSlMuV3JpdGFibGVTdHJlYW0pOiB2b2lkIHtcblx0XHRzdXBlci5zdGFydChpblN0cmVhbSwgb3V0U3RyZWFtKTtcblx0XHRsb2dnZXIuaW5pdChlID0+IHRoaXMuc2VuZEV2ZW50KGUpLCB0aGlzLm9ic29sZXRlX2xvZ0ZpbGVQYXRoLCB0aGlzLl9pc1NlcnZlcik7XG5cdH1cblxuXHQvKipcblx0ICogT3ZlcmxvYWQgc2VuZEV2ZW50IHRvIGxvZ1xuXHQgKi9cblx0cHVibGljIHNlbmRFdmVudChldmVudDogRGVidWdQcm90b2NvbC5FdmVudCk6IHZvaWQge1xuXHRcdGlmICghKGV2ZW50IGluc3RhbmNlb2YgTG9nZ2VyLkxvZ091dHB1dEV2ZW50KSkge1xuXHRcdFx0Ly8gRG9uJ3QgY3JlYXRlIGFuIGluZmluaXRlIGxvb3AuLi5cblxuXHRcdFx0bGV0IG9iamVjdFRvTG9nID0gZXZlbnQ7XG5cdFx0XHRpZiAoZXZlbnQgaW5zdGFuY2VvZiBPdXRwdXRFdmVudCAmJiBldmVudC5ib2R5ICYmIGV2ZW50LmJvZHkuZGF0YSAmJiBldmVudC5ib2R5LmRhdGEuZG9Ob3RMb2dPdXRwdXQpIHtcblx0XHRcdFx0ZGVsZXRlIGV2ZW50LmJvZHkuZGF0YS5kb05vdExvZ091dHB1dDtcblx0XHRcdFx0b2JqZWN0VG9Mb2cgPSB7IC4uLmV2ZW50IH07XG5cdFx0XHRcdG9iamVjdFRvTG9nLmJvZHkgPSB7IC4uLmV2ZW50LmJvZHksIG91dHB1dDogJzxvdXRwdXQgbm90IGxvZ2dlZD4nIH1cblx0XHRcdH1cblxuXHRcdFx0bG9nZ2VyLnZlcmJvc2UoYFRvIGNsaWVudDogJHtKU09OLnN0cmluZ2lmeShvYmplY3RUb0xvZyl9YCk7XG5cdFx0fVxuXG5cdFx0c3VwZXIuc2VuZEV2ZW50KGV2ZW50KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVybG9hZCBzZW5kUmVxdWVzdCB0byBsb2dcblx0ICovXG5cdHB1YmxpYyBzZW5kUmVxdWVzdChjb21tYW5kOiBzdHJpbmcsIGFyZ3M6IGFueSwgdGltZW91dDogbnVtYmVyLCBjYjogKHJlc3BvbnNlOiBEZWJ1Z1Byb3RvY29sLlJlc3BvbnNlKSA9PiB2b2lkKTogdm9pZCB7XG5cdFx0bG9nZ2VyLnZlcmJvc2UoYFRvIGNsaWVudDogJHtKU09OLnN0cmluZ2lmeShjb21tYW5kKX0oJHtKU09OLnN0cmluZ2lmeShhcmdzKX0pLCB0aW1lb3V0OiAke3RpbWVvdXR9YCk7XG5cdFx0c3VwZXIuc2VuZFJlcXVlc3QoY29tbWFuZCwgYXJncywgdGltZW91dCwgY2IpO1xuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJsb2FkIHNlbmRSZXNwb25zZSB0byBsb2dcblx0ICovXG5cdHB1YmxpYyBzZW5kUmVzcG9uc2UocmVzcG9uc2U6IERlYnVnUHJvdG9jb2wuUmVzcG9uc2UpOiB2b2lkIHtcblx0XHRsb2dnZXIudmVyYm9zZShgVG8gY2xpZW50OiAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlKX1gKTtcblx0XHRzdXBlci5zZW5kUmVzcG9uc2UocmVzcG9uc2UpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGRpc3BhdGNoUmVxdWVzdChyZXF1ZXN0OiBEZWJ1Z1Byb3RvY29sLlJlcXVlc3QpOiB2b2lkIHtcblx0XHRsb2dnZXIudmVyYm9zZShgRnJvbSBjbGllbnQ6ICR7cmVxdWVzdC5jb21tYW5kfSgke0pTT04uc3RyaW5naWZ5KHJlcXVlc3QuYXJndW1lbnRzKSB9KWApO1xuXHRcdHN1cGVyLmRpc3BhdGNoUmVxdWVzdChyZXF1ZXN0KTtcblx0fVxufVxuIl19","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Handles = exports.Response = exports.Event = exports.ErrorDestination = exports.CompletionItem = exports.Module = exports.Source = exports.Breakpoint = exports.Variable = exports.Scope = exports.StackFrame = exports.Thread = exports.MemoryEvent = exports.InvalidatedEvent = exports.ProgressEndEvent = exports.ProgressUpdateEvent = exports.ProgressStartEvent = exports.CapabilitiesEvent = exports.LoadedSourceEvent = exports.ModuleEvent = exports.BreakpointEvent = exports.ThreadEvent = exports.OutputEvent = exports.ContinuedEvent = exports.StoppedEvent = exports.ExitedEvent = exports.TerminatedEvent = exports.InitializedEvent = exports.logger = exports.Logger = exports.LoggingDebugSession = exports.DebugSession = void 0;\nconst debugSession_1 = require(\"./debugSession\");\nObject.defineProperty(exports, \"DebugSession\", { enumerable: true, get: function () { return debugSession_1.DebugSession; } });\nObject.defineProperty(exports, \"InitializedEvent\", { enumerable: true, get: function () { return debugSession_1.InitializedEvent; } });\nObject.defineProperty(exports, \"TerminatedEvent\", { enumerable: true, get: function () { return debugSession_1.TerminatedEvent; } });\nObject.defineProperty(exports, \"ExitedEvent\", { enumerable: true, get: function () { return debugSession_1.ExitedEvent; } });\nObject.defineProperty(exports, \"StoppedEvent\", { enumerable: true, get: function () { return debugSession_1.StoppedEvent; } });\nObject.defineProperty(exports, \"ContinuedEvent\", { enumerable: true, get: function () { return debugSession_1.ContinuedEvent; } });\nObject.defineProperty(exports, \"OutputEvent\", { enumerable: true, get: function () { return debugSession_1.OutputEvent; } });\nObject.defineProperty(exports, \"ThreadEvent\", { enumerable: true, get: function () { return debugSession_1.ThreadEvent; } });\nObject.defineProperty(exports, \"BreakpointEvent\", { enumerable: true, get: function () { return debugSession_1.BreakpointEvent; } });\nObject.defineProperty(exports, \"ModuleEvent\", { enumerable: true, get: function () { return debugSession_1.ModuleEvent; } });\nObject.defineProperty(exports, \"LoadedSourceEvent\", { enumerable: true, get: function () { return debugSession_1.LoadedSourceEvent; } });\nObject.defineProperty(exports, \"CapabilitiesEvent\", { enumerable: true, get: function () { return debugSession_1.CapabilitiesEvent; } });\nObject.defineProperty(exports, \"ProgressStartEvent\", { enumerable: true, get: function () { return debugSession_1.ProgressStartEvent; } });\nObject.defineProperty(exports, \"ProgressUpdateEvent\", { enumerable: true, get: function () { return debugSession_1.ProgressUpdateEvent; } });\nObject.defineProperty(exports, \"ProgressEndEvent\", { enumerable: true, get: function () { return debugSession_1.ProgressEndEvent; } });\nObject.defineProperty(exports, \"InvalidatedEvent\", { enumerable: true, get: function () { return debugSession_1.InvalidatedEvent; } });\nObject.defineProperty(exports, \"MemoryEvent\", { enumerable: true, get: function () { return debugSession_1.MemoryEvent; } });\nObject.defineProperty(exports, \"Thread\", { enumerable: true, get: function () { return debugSession_1.Thread; } });\nObject.defineProperty(exports, \"StackFrame\", { enumerable: true, get: function () { return debugSession_1.StackFrame; } });\nObject.defineProperty(exports, \"Scope\", { enumerable: true, get: function () { return debugSession_1.Scope; } });\nObject.defineProperty(exports, \"Variable\", { enumerable: true, get: function () { return debugSession_1.Variable; } });\nObject.defineProperty(exports, \"Breakpoint\", { enumerable: true, get: function () { return debugSession_1.Breakpoint; } });\nObject.defineProperty(exports, \"Source\", { enumerable: true, get: function () { return debugSession_1.Source; } });\nObject.defineProperty(exports, \"Module\", { enumerable: true, get: function () { return debugSession_1.Module; } });\nObject.defineProperty(exports, \"CompletionItem\", { enumerable: true, get: function () { return debugSession_1.CompletionItem; } });\nObject.defineProperty(exports, \"ErrorDestination\", { enumerable: true, get: function () { return debugSession_1.ErrorDestination; } });\nconst loggingDebugSession_1 = require(\"./loggingDebugSession\");\nObject.defineProperty(exports, \"LoggingDebugSession\", { enumerable: true, get: function () { return loggingDebugSession_1.LoggingDebugSession; } });\nconst Logger = require(\"./logger\");\nexports.Logger = Logger;\nconst messages_1 = require(\"./messages\");\nObject.defineProperty(exports, \"Event\", { enumerable: true, get: function () { return messages_1.Event; } });\nObject.defineProperty(exports, \"Response\", { enumerable: true, get: function () { return messages_1.Response; } });\nconst handles_1 = require(\"./handles\");\nObject.defineProperty(exports, \"Handles\", { enumerable: true, get: function () { return handles_1.Handles; } });\nconst logger = Logger.logger;\nexports.logger = logger;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Z0dBR2dHO0FBQ2hHLFlBQVksQ0FBQzs7O0FBRWIsaURBT3dCO0FBU3ZCLDZGQWZBLDJCQUFZLE9BZUE7QUFJWixpR0FsQkEsK0JBQWdCLE9Ba0JBO0FBQUUsZ0dBbEJBLDhCQUFlLE9Ba0JBO0FBQUUsNEZBbEJBLDBCQUFXLE9Ba0JBO0FBQUUsNkZBbEJBLDJCQUFZLE9Ba0JBO0FBQUUsK0ZBbEJBLDZCQUFjLE9Ba0JBO0FBQUUsNEZBbEJBLDBCQUFXLE9Ba0JBO0FBQUUsNEZBbEJBLDBCQUFXLE9Ba0JBO0FBQUUsZ0dBbEJBLDhCQUFlLE9Ba0JBO0FBQUUsNEZBbEJBLDBCQUFXLE9Ba0JBO0FBQ25JLGtHQWxCQSxnQ0FBaUIsT0FrQkE7QUFBRSxrR0FsQkEsZ0NBQWlCLE9Ba0JBO0FBQUUsbUdBbEJBLGlDQUFrQixPQWtCQTtBQUFFLG9HQWxCQSxrQ0FBbUIsT0FrQkE7QUFBRSxpR0FsQkEsK0JBQWdCLE9Ba0JBO0FBQUUsaUdBbEJBLCtCQUFnQixPQWtCQTtBQUFFLDRGQWxCQSwwQkFBVyxPQWtCQTtBQUMvSCx1RkFsQkEscUJBQU0sT0FrQkE7QUFBRSwyRkFsQkEseUJBQVUsT0FrQkE7QUFBRSxzRkFsQkEsb0JBQUssT0FrQkE7QUFBRSx5RkFsQkEsdUJBQVEsT0FrQkE7QUFDbkMsMkZBbEJBLHlCQUFVLE9Ba0JBO0FBQUUsdUZBbEJBLHFCQUFNLE9Ba0JBO0FBQUUsdUZBbEJBLHFCQUFNLE9Ba0JBO0FBQUUsK0ZBbEJBLDZCQUFjLE9Ba0JBO0FBQzFDLGlHQWxCQSwrQkFBZ0IsT0FrQkE7QUFoQmpCLCtEQUEwRDtBQVN6RCxvR0FUTyx5Q0FBbUIsT0FTUDtBQVJwQixtQ0FBbUM7QUFTbEMsd0JBQU07QUFSUCx5Q0FBNkM7QUFlNUMsc0ZBZlEsZ0JBQUssT0FlUjtBQUFFLHlGQWZRLG1CQUFRLE9BZVI7QUFkaEIsdUNBQW9DO0FBZW5DLHdGQWZRLGlCQUFPLE9BZVI7QUFiUixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBTTVCLHdCQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1xuXHREZWJ1Z1Nlc3Npb24sXG5cdEluaXRpYWxpemVkRXZlbnQsIFRlcm1pbmF0ZWRFdmVudCwgRXhpdGVkRXZlbnQsIFN0b3BwZWRFdmVudCwgQ29udGludWVkRXZlbnQsIE91dHB1dEV2ZW50LCBUaHJlYWRFdmVudCwgQnJlYWtwb2ludEV2ZW50LCBNb2R1bGVFdmVudCxcblx0XHRMb2FkZWRTb3VyY2VFdmVudCwgQ2FwYWJpbGl0aWVzRXZlbnQsIFByb2dyZXNzU3RhcnRFdmVudCwgUHJvZ3Jlc3NVcGRhdGVFdmVudCwgUHJvZ3Jlc3NFbmRFdmVudCwgSW52YWxpZGF0ZWRFdmVudCwgTWVtb3J5RXZlbnQsXG5cdFRocmVhZCwgU3RhY2tGcmFtZSwgU2NvcGUsIFZhcmlhYmxlLFxuXHRCcmVha3BvaW50LCBTb3VyY2UsIE1vZHVsZSwgQ29tcGxldGlvbkl0ZW0sXG5cdEVycm9yRGVzdGluYXRpb25cbn0gZnJvbSAnLi9kZWJ1Z1Nlc3Npb24nO1xuaW1wb3J0IHtMb2dnaW5nRGVidWdTZXNzaW9ufSBmcm9tICcuL2xvZ2dpbmdEZWJ1Z1Nlc3Npb24nO1xuaW1wb3J0ICogYXMgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IEV2ZW50LCBSZXNwb25zZSB9IGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHsgSGFuZGxlcyB9IGZyb20gJy4vaGFuZGxlcyc7XG5cbmNvbnN0IGxvZ2dlciA9IExvZ2dlci5sb2dnZXI7XG5cbmV4cG9ydCB7XG5cdERlYnVnU2Vzc2lvbixcblx0TG9nZ2luZ0RlYnVnU2Vzc2lvbixcblx0TG9nZ2VyLFxuXHRsb2dnZXIsXG5cdEluaXRpYWxpemVkRXZlbnQsIFRlcm1pbmF0ZWRFdmVudCwgRXhpdGVkRXZlbnQsIFN0b3BwZWRFdmVudCwgQ29udGludWVkRXZlbnQsIE91dHB1dEV2ZW50LCBUaHJlYWRFdmVudCwgQnJlYWtwb2ludEV2ZW50LCBNb2R1bGVFdmVudCxcblx0XHRMb2FkZWRTb3VyY2VFdmVudCwgQ2FwYWJpbGl0aWVzRXZlbnQsIFByb2dyZXNzU3RhcnRFdmVudCwgUHJvZ3Jlc3NVcGRhdGVFdmVudCwgUHJvZ3Jlc3NFbmRFdmVudCwgSW52YWxpZGF0ZWRFdmVudCwgTWVtb3J5RXZlbnQsXG5cdFRocmVhZCwgU3RhY2tGcmFtZSwgU2NvcGUsIFZhcmlhYmxlLFxuXHRCcmVha3BvaW50LCBTb3VyY2UsIE1vZHVsZSwgQ29tcGxldGlvbkl0ZW0sXG5cdEVycm9yRGVzdGluYXRpb24sXG5cdEV2ZW50LCBSZXNwb25zZSxcblx0SGFuZGxlc1xufVxuIl19","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Event = exports.Response = exports.Message = void 0;\nclass Message {\n    constructor(type) {\n        this.seq = 0;\n        this.type = type;\n    }\n}\nexports.Message = Message;\nclass Response extends Message {\n    constructor(request, message) {\n        super('response');\n        this.request_seq = request.seq;\n        this.command = request.command;\n        if (message) {\n            this.success = false;\n            this.message = message;\n        }\n        else {\n            this.success = true;\n        }\n    }\n}\nexports.Response = Response;\nclass Event extends Message {\n    constructor(event, body) {\n        super('event');\n        this.event = event;\n        if (body) {\n            this.body = body;\n        }\n    }\n}\nexports.Event = Event;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWVzc2FnZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Z0dBR2dHOzs7QUFLaEcsTUFBYSxPQUFPO0lBSW5CLFlBQW1CLElBQVk7UUFDOUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0NBQ0Q7QUFSRCwwQkFRQztBQUVELE1BQWEsUUFBUyxTQUFRLE9BQU87SUFLcEMsWUFBbUIsT0FBOEIsRUFBRSxPQUFnQjtRQUNsRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUMvQixJQUFJLE9BQU8sRUFBRTtZQUNaLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ2YsSUFBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FDOUI7YUFBTTtZQUNOLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3BCO0lBQ0YsQ0FBQztDQUNEO0FBaEJELDRCQWdCQztBQUVELE1BQWEsS0FBTSxTQUFRLE9BQU87SUFHakMsWUFBbUIsS0FBYSxFQUFFLElBQVU7UUFDM0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxJQUFJLEVBQUU7WUFDSCxJQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUN4QjtJQUNGLENBQUM7Q0FDRDtBQVZELHNCQVVDIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmltcG9ydCB7IERlYnVnUHJvdG9jb2wgfSBmcm9tICdAdnNjb2RlL2RlYnVncHJvdG9jb2wnO1xuXG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlIGltcGxlbWVudHMgRGVidWdQcm90b2NvbC5Qcm90b2NvbE1lc3NhZ2Uge1xuXHRzZXE6IG51bWJlcjtcblx0dHlwZTogc3RyaW5nO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcih0eXBlOiBzdHJpbmcpIHtcblx0XHR0aGlzLnNlcSA9IDA7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgUmVzcG9uc2UgZXh0ZW5kcyBNZXNzYWdlIGltcGxlbWVudHMgRGVidWdQcm90b2NvbC5SZXNwb25zZSB7XG5cdHJlcXVlc3Rfc2VxOiBudW1iZXI7XG5cdHN1Y2Nlc3M6IGJvb2xlYW47XG5cdGNvbW1hbmQ6IHN0cmluZztcblxuXHRwdWJsaWMgY29uc3RydWN0b3IocmVxdWVzdDogRGVidWdQcm90b2NvbC5SZXF1ZXN0LCBtZXNzYWdlPzogc3RyaW5nKSB7XG5cdFx0c3VwZXIoJ3Jlc3BvbnNlJyk7XG5cdFx0dGhpcy5yZXF1ZXN0X3NlcSA9IHJlcXVlc3Quc2VxO1xuXHRcdHRoaXMuY29tbWFuZCA9IHJlcXVlc3QuY29tbWFuZDtcblx0XHRpZiAobWVzc2FnZSkge1xuXHRcdFx0dGhpcy5zdWNjZXNzID0gZmFsc2U7XG5cdFx0XHQoPGFueT50aGlzKS5tZXNzYWdlID0gbWVzc2FnZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zdWNjZXNzID0gdHJ1ZTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIEV2ZW50IGV4dGVuZHMgTWVzc2FnZSBpbXBsZW1lbnRzIERlYnVnUHJvdG9jb2wuRXZlbnQge1xuXHRldmVudDogc3RyaW5nO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihldmVudDogc3RyaW5nLCBib2R5PzogYW55KSB7XG5cdFx0c3VwZXIoJ2V2ZW50Jyk7XG5cdFx0dGhpcy5ldmVudCA9IGV2ZW50O1xuXHRcdGlmIChib2R5KSB7XG5cdFx0XHQoPGFueT50aGlzKS5ib2R5ID0gYm9keTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProtocolServer = void 0;\nconst ee = require(\"events\");\nconst messages_1 = require(\"./messages\");\nclass Disposable0 {\n    dispose() {\n    }\n}\nclass Emitter {\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArg) => {\n                this._listener = listener;\n                this._this = thisArg;\n                let result;\n                result = {\n                    dispose: () => {\n                        this._listener = undefined;\n                        this._this = undefined;\n                    }\n                };\n                return result;\n            };\n        }\n        return this._event;\n    }\n    fire(event) {\n        if (this._listener) {\n            try {\n                this._listener.call(this._this, event);\n            }\n            catch (e) {\n            }\n        }\n    }\n    hasListener() {\n        return !!this._listener;\n    }\n    dispose() {\n        this._listener = undefined;\n        this._this = undefined;\n    }\n}\nclass ProtocolServer extends ee.EventEmitter {\n    constructor() {\n        super();\n        this._sendMessage = new Emitter();\n        this._sequence = 1;\n        this._pendingRequests = new Map();\n        this.onDidSendMessage = this._sendMessage.event;\n    }\n    // ---- implements vscode.Debugadapter interface ---------------------------\n    dispose() {\n    }\n    handleMessage(msg) {\n        if (msg.type === 'request') {\n            this.dispatchRequest(msg);\n        }\n        else if (msg.type === 'response') {\n            const response = msg;\n            const clb = this._pendingRequests.get(response.request_seq);\n            if (clb) {\n                this._pendingRequests.delete(response.request_seq);\n                clb(response);\n            }\n        }\n    }\n    _isRunningInline() {\n        return this._sendMessage && this._sendMessage.hasListener();\n    }\n    //--------------------------------------------------------------------------\n    start(inStream, outStream) {\n        this._writableStream = outStream;\n        this._rawData = Buffer.alloc(0);\n        inStream.on('data', (data) => this._handleData(data));\n        inStream.on('close', () => {\n            this._emitEvent(new messages_1.Event('close'));\n        });\n        inStream.on('error', (error) => {\n            this._emitEvent(new messages_1.Event('error', 'inStream error: ' + (error && error.message)));\n        });\n        outStream.on('error', (error) => {\n            this._emitEvent(new messages_1.Event('error', 'outStream error: ' + (error && error.message)));\n        });\n        inStream.resume();\n    }\n    stop() {\n        if (this._writableStream) {\n            this._writableStream.end();\n        }\n    }\n    sendEvent(event) {\n        this._send('event', event);\n    }\n    sendResponse(response) {\n        if (response.seq > 0) {\n            console.error(`attempt to send more than one response for command ${response.command}`);\n        }\n        else {\n            this._send('response', response);\n        }\n    }\n    sendRequest(command, args, timeout, cb) {\n        const request = {\n            command: command\n        };\n        if (args && Object.keys(args).length > 0) {\n            request.arguments = args;\n        }\n        this._send('request', request);\n        if (cb) {\n            this._pendingRequests.set(request.seq, cb);\n            const timer = setTimeout(() => {\n                clearTimeout(timer);\n                const clb = this._pendingRequests.get(request.seq);\n                if (clb) {\n                    this._pendingRequests.delete(request.seq);\n                    clb(new messages_1.Response(request, 'timeout'));\n                }\n            }, timeout);\n        }\n    }\n    // ---- protected ----------------------------------------------------------\n    dispatchRequest(request) {\n    }\n    // ---- private ------------------------------------------------------------\n    _emitEvent(event) {\n        this.emit(event.event, event);\n    }\n    _send(typ, message) {\n        message.type = typ;\n        message.seq = this._sequence++;\n        if (this._writableStream) {\n            const json = JSON.stringify(message);\n            this._writableStream.write(`Content-Length: ${Buffer.byteLength(json, 'utf8')}\\r\\n\\r\\n${json}`, 'utf8');\n        }\n        this._sendMessage.fire(message);\n    }\n    _handleData(data) {\n        this._rawData = Buffer.concat([this._rawData, data]);\n        while (true) {\n            if (this._contentLength >= 0) {\n                if (this._rawData.length >= this._contentLength) {\n                    const message = this._rawData.toString('utf8', 0, this._contentLength);\n                    this._rawData = this._rawData.slice(this._contentLength);\n                    this._contentLength = -1;\n                    if (message.length > 0) {\n                        try {\n                            let msg = JSON.parse(message);\n                            this.handleMessage(msg);\n                        }\n                        catch (e) {\n                            this._emitEvent(new messages_1.Event('error', 'Error handling data: ' + (e && e.message)));\n                        }\n                    }\n                    continue; // there may be more complete messages to process\n                }\n            }\n            else {\n                const idx = this._rawData.indexOf(ProtocolServer.TWO_CRLF);\n                if (idx !== -1) {\n                    const header = this._rawData.toString('utf8', 0, idx);\n                    const lines = header.split('\\r\\n');\n                    for (let i = 0; i < lines.length; i++) {\n                        const pair = lines[i].split(/: +/);\n                        if (pair[0] == 'Content-Length') {\n                            this._contentLength = +pair[1];\n                        }\n                    }\n                    this._rawData = this._rawData.slice(idx + ProtocolServer.TWO_CRLF.length);\n                    continue;\n                }\n            }\n            break;\n        }\n    }\n}\nexports.ProtocolServer = ProtocolServer;\nProtocolServer.TWO_CRLF = '\\r\\n\\r\\n';\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runDebugAdapter = void 0;\nconst Net = require(\"net\");\nfunction runDebugAdapter(debugSession) {\n    // parse arguments\n    let port = 0;\n    const args = process.argv.slice(2);\n    args.forEach(function (val, index, array) {\n        const portMatch = /^--server=(\\d{4,5})$/.exec(val);\n        if (portMatch) {\n            port = parseInt(portMatch[1], 10);\n        }\n    });\n    if (port > 0) {\n        // start as a server\n        console.error(`waiting for debug protocol on port ${port}`);\n        Net.createServer((socket) => {\n            console.error('>> accepted connection from client');\n            socket.on('end', () => {\n                console.error('>> client connection closed\\n');\n            });\n            const session = new debugSession(false, true);\n            session.setRunAsServer(true);\n            session.start(socket, socket);\n        }).listen(port);\n    }\n    else {\n        // start a session\n        //console.error('waiting for debug protocol on stdin/stdout');\n        const session = new debugSession(false);\n        process.on('SIGTERM', () => {\n            session.shutdown();\n        });\n        session.start(process.stdin, process.stdout);\n    }\n}\nexports.runDebugAdapter = runDebugAdapter;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuRGVidWdBZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3J1bkRlYnVnQWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztnR0FHZ0c7OztBQUVoRywyQkFBMkI7QUFJM0IsU0FBZ0IsZUFBZSxDQUFDLFlBQWlDO0lBRWhFLGtCQUFrQjtJQUNsQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFDYixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ3ZDLE1BQU0sU0FBUyxHQUFHLHNCQUFzQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRCxJQUFJLFNBQVMsRUFBRTtZQUNkLElBQUksR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ2xDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7UUFDYixvQkFBb0I7UUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1RCxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDM0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1lBQ3BELE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDckIsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1lBQ2hELENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzlDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2hCO1NBQU07UUFFTixrQkFBa0I7UUFDbEIsOERBQThEO1FBQzlELE1BQU0sT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtZQUMxQixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzdDO0FBQ0YsQ0FBQztBQWxDRCwwQ0FrQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuaW1wb3J0ICogYXMgTmV0IGZyb20gJ25ldCc7XG5cbmltcG9ydCB7IERlYnVnU2Vzc2lvbiB9IGZyb20gJy4vZGVidWdTZXNzaW9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkRlYnVnQWRhcHRlcihkZWJ1Z1Nlc3Npb246IHR5cGVvZiBEZWJ1Z1Nlc3Npb24pIHtcblxuXHQvLyBwYXJzZSBhcmd1bWVudHNcblx0bGV0IHBvcnQgPSAwO1xuXHRjb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXHRhcmdzLmZvckVhY2goZnVuY3Rpb24gKHZhbCwgaW5kZXgsIGFycmF5KSB7XG5cdFx0Y29uc3QgcG9ydE1hdGNoID0gL14tLXNlcnZlcj0oXFxkezQsNX0pJC8uZXhlYyh2YWwpO1xuXHRcdGlmIChwb3J0TWF0Y2gpIHtcblx0XHRcdHBvcnQgPSBwYXJzZUludChwb3J0TWF0Y2hbMV0sIDEwKTtcblx0XHR9XG5cdH0pO1xuXG5cdGlmIChwb3J0ID4gMCkge1xuXHRcdC8vIHN0YXJ0IGFzIGEgc2VydmVyXG5cdFx0Y29uc29sZS5lcnJvcihgd2FpdGluZyBmb3IgZGVidWcgcHJvdG9jb2wgb24gcG9ydCAke3BvcnR9YCk7XG5cdFx0TmV0LmNyZWF0ZVNlcnZlcigoc29ja2V0KSA9PiB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCc+PiBhY2NlcHRlZCBjb25uZWN0aW9uIGZyb20gY2xpZW50Jyk7XG5cdFx0XHRzb2NrZXQub24oJ2VuZCcsICgpID0+IHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcignPj4gY2xpZW50IGNvbm5lY3Rpb24gY2xvc2VkXFxuJyk7XG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IHNlc3Npb24gPSBuZXcgZGVidWdTZXNzaW9uKGZhbHNlLCB0cnVlKTtcblx0XHRcdHNlc3Npb24uc2V0UnVuQXNTZXJ2ZXIodHJ1ZSk7XG5cdFx0XHRzZXNzaW9uLnN0YXJ0KHNvY2tldCwgc29ja2V0KTtcblx0XHR9KS5saXN0ZW4ocG9ydCk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBzdGFydCBhIHNlc3Npb25cblx0XHQvL2NvbnNvbGUuZXJyb3IoJ3dhaXRpbmcgZm9yIGRlYnVnIHByb3RvY29sIG9uIHN0ZGluL3N0ZG91dCcpO1xuXHRcdGNvbnN0IHNlc3Npb24gPSBuZXcgZGVidWdTZXNzaW9uKGZhbHNlKTtcblx0XHRwcm9jZXNzLm9uKCdTSUdURVJNJywgKCkgPT4ge1xuXHRcdFx0c2Vzc2lvbi5zaHV0ZG93bigpO1xuXHRcdH0pO1xuXHRcdHNlc3Npb24uc3RhcnQocHJvY2Vzcy5zdGRpbiwgcHJvY2Vzcy5zdGRvdXQpO1xuXHR9XG59XG4iXX0=","import * as vscode from \"vscode\";\nimport { WorkspaceFolder, DebugConfiguration, ProviderResult } from \"vscode\";\nimport { AmalgamConfigurationProvider } from \"./configuration\";\n\n/**\n * Activate debugger.\n * @param context The VS Code extension context.\n * @param factory The debug adapter factory.\n */\nexport function activateDebug(context: vscode.ExtensionContext, factory: vscode.DebugAdapterDescriptorFactory) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"extension.amalgam.runEditorContents\", (resource: vscode.Uri) => {\n      let targetResource = resource;\n      if (!targetResource && vscode.window.activeTextEditor) {\n        targetResource = vscode.window.activeTextEditor.document.uri;\n      }\n      if (targetResource) {\n        vscode.debug.startDebugging(\n          undefined,\n          {\n            type: \"amalgam\",\n            name: \"Run File\",\n            request: \"launch\",\n            program: targetResource.fsPath,\n          },\n          { noDebug: true }\n        );\n      }\n    }),\n    vscode.commands.registerCommand(\"extension.amalgam.debugEditorContents\", (resource: vscode.Uri) => {\n      let targetResource = resource;\n      if (!targetResource && vscode.window.activeTextEditor) {\n        targetResource = vscode.window.activeTextEditor.document.uri;\n      }\n      if (targetResource) {\n        vscode.debug.startDebugging(undefined, {\n          type: \"amalgam\",\n          name: \"Debug Amalgam\",\n          request: \"launch\",\n          program: targetResource.fsPath,\n          stopOnEntry: false,\n        });\n      }\n    })\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"extension.amalgam.chooseAmalgamFile\", () => {\n      return vscode.window.showInputBox({\n        placeHolder: \"Please enter the name of an Amalgam file in the workspace folder\",\n        value: \"myfile.amlg\",\n      });\n    })\n  );\n\n  // register a configuration provider for 'amalgam' debug type\n  const provider = new AmalgamConfigurationProvider();\n  context.subscriptions.push(vscode.debug.registerDebugConfigurationProvider(\"amalgam\", provider));\n\n  // register a dynamic configuration provider for 'amalgam' debug type\n  context.subscriptions.push(\n    vscode.debug.registerDebugConfigurationProvider(\n      \"amalgam\",\n      {\n        provideDebugConfigurations(folder: WorkspaceFolder | undefined): ProviderResult<DebugConfiguration[]> {\n          return [\n            {\n              name: \"Dynamic Launch\",\n              request: \"launch\",\n              type: \"amalgam\",\n              program: \"${file}\",\n              workingDirectory: folder,\n            },\n            {\n              name: \"Another Dynamic Launch\",\n              request: \"launch\",\n              type: \"amalgam\",\n              program: \"${file}\",\n              workingDirectory: folder,\n            },\n            {\n              name: \"Amalgam Launch\",\n              request: \"launch\",\n              type: \"amalgam\",\n              program: \"${file}\",\n              workingDirectory: folder,\n            },\n          ];\n        },\n      },\n      vscode.DebugConfigurationProviderTriggerKind.Dynamic\n    )\n  );\n\n  // Override default implementation of the debug hover, here we attempt to only match words that may be\n  // a variable name\n  context.subscriptions.push(\n    vscode.languages.registerEvaluatableExpressionProvider(\"amalgam\", {\n      provideEvaluatableExpression(\n        document: vscode.TextDocument,\n        position: vscode.Position\n      ): vscode.ProviderResult<vscode.EvaluatableExpression> {\n        const VARIABLE_REGEXP = /(?<![(#\"'a-z0-9_.])(?<name>[_a-z]+[_a-z0-9]*)(?![\"'a-z0-9])/gi;\n        const line = document.lineAt(position.line).text;\n\n        let matches: RegExpExecArray | null;\n        top: while ((matches = VARIABLE_REGEXP.exec(line)) != null) {\n          if (matches.groups) {\n            const name = matches.groups.name;\n            const varRange = new vscode.Range(position.line, matches.index, position.line, matches.index + name.length);\n\n            // Don't match when inside a string\n            const QUOTE_REGEXP = /([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g;\n            let qMatches: RegExpExecArray | null;\n            while ((qMatches = QUOTE_REGEXP.exec(line)) != null) {\n              const qRange = new vscode.Range(\n                position.line,\n                qMatches.index,\n                position.line,\n                qMatches.index + qMatches[0].length\n              );\n              if (qRange.contains(varRange)) {\n                continue top;\n              }\n            }\n\n            // Don't match when inside a comment\n            const COMMENT_REGEXP = /;.*$/g;\n            let cMatches: RegExpExecArray | null;\n            while ((cMatches = COMMENT_REGEXP.exec(line)) != null) {\n              const cRange = new vscode.Range(\n                position.line,\n                cMatches.index,\n                position.line,\n                cMatches.index + cMatches[0].length\n              );\n              if (cRange.contains(varRange)) {\n                continue top;\n              }\n            }\n\n            // Only match if variable in position\n            if (varRange.contains(position)) {\n              return new vscode.EvaluatableExpression(varRange);\n            }\n          }\n        }\n        return undefined;\n      },\n    })\n  );\n\n  context.subscriptions.push(vscode.debug.registerDebugAdapterDescriptorFactory(\"amalgam\", factory));\n}\n","import * as vscode from \"vscode\";\nimport { WorkspaceFolder, DebugConfiguration, ProviderResult } from \"vscode\";\n\nexport class AmalgamConfigurationProvider implements vscode.DebugConfigurationProvider {\n  /**\n   * Massage a debug configuration just before a debug session is being launched,\n   * e.g. add all missing attributes to the debug configuration.\n   */\n  resolveDebugConfiguration(\n    folder: WorkspaceFolder | undefined,\n    config: DebugConfiguration\n  ): ProviderResult<DebugConfiguration> {\n    // If launch.json is missing or empty\n    if (!config.type && !config.request && !config.name) {\n      const editor = vscode.window.activeTextEditor;\n      if (editor && editor.document.languageId === \"amalgam\") {\n        config.type = \"amalgam\";\n        config.name = \"Launch Amalgam\";\n        config.request = \"launch\";\n        config.program = \"${file}\";\n        config.stopOnEntry = false;\n      }\n    }\n\n    if (!config.program) {\n      return vscode.window.showInformationMessage(\"Cannot find a program to debug\").then(() => {\n        return undefined; // abort launch\n      });\n    }\n\n    return config;\n  }\n}\n","export class RuntimeError extends Error {\n  constructor(public readonly reason: string, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain\n  }\n}\n\nexport class RuntimeNotStarted extends RuntimeError {\n  constructor(message?: string) {\n    super(\"not started\", message);\n    Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain\n  }\n}\n\nexport class RuntimeCommandCancelled extends RuntimeError {\n  constructor(message?: string) {\n    super(\"command cancelled\", message);\n    Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain\n  }\n}\n\nexport class InvalidRuntimeResponse extends RuntimeError {\n  constructor(message?: string) {\n    super(\"invalid response\", message);\n    Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain\n  }\n}\n","import * as vscode from \"vscode\";\nimport { AmalgamDebugSession } from \"./session\";\n\n/**\n * Debug adapter factory for directly talking to Amalgam debugger.\n */\nexport class InlineDebugAdapterFactory implements vscode.DebugAdapterDescriptorFactory {\n  createDebugAdapterDescriptor(session: vscode.DebugSession): vscode.ProviderResult<vscode.DebugAdapterDescriptor> {\n    return new vscode.DebugAdapterInlineImplementation(new AmalgamDebugSession(session));\n  }\n}\n\n/**\n * Debug adapter factory for external adapter executable.\n * TODO: Debug Adapter Protocol not yet implemented in Amalgam\n */\nexport class ExternalDebugAdapterFactory implements vscode.DebugAdapterDescriptorFactory {\n  createDebugAdapterDescriptor(\n    session: vscode.DebugSession,\n    executable: vscode.DebugAdapterExecutable | undefined\n  ): vscode.ProviderResult<vscode.DebugAdapterDescriptor> {\n    // If the executable specified in the package.json does not exist, use the system default\n    if (!executable) {\n      const command = \"~/.amalgam/bin/amalgam\";\n      const args = [\"--debug\", \"--debug-sources\"];\n      const options = {\n        cwd: session.workspaceFolder?.uri?.toString(), // working directory for executable\n        // env: { envVariable: \"some value\" },\n      };\n      executable = new vscode.DebugAdapterExecutable(command, args, options);\n    }\n\n    // Make VSCode launch the DA executable\n    return executable;\n  }\n}\n","import { spawn, ChildProcessWithoutNullStreams } from \"child_process\";\nimport { EventEmitter } from \"events\";\nimport { platform } from \"os\";\nimport { queue, QueueObject } from \"async\";\nimport { logger } from \"../logging\";\nimport { InvalidRuntimeResponse, RuntimeCommandCancelled, RuntimeNotStarted } from \"./errors\";\nimport { NotifySubject } from \"./utils/notify\";\n\nexport type DataSource = \"stdout\" | \"stderr\" | \"stdin\";\n\n/** Runtime launch options */\nexport interface IRuntimeLaunchOptions {\n  program: string;\n  executable: string;\n  args?: string[];\n  cwd?: string;\n  env?: {\n    [key: string]: string;\n  };\n}\n\n/** Types of runtime events emitted */\nexport enum RuntimeEvent {\n  STOP_ON_ENTRY = \"stopOnEntry\",\n  STOP_ON_STEP = \"stopOnStep\",\n  STOP_ON_BREAKPOINT = \"stopOnBreakpoint\",\n  STOP_ON_EXCEPTION = \"stopOnException\",\n  BREAKPOINT_VALIDATED = \"breakpointValidated\",\n  OUTPUT = \"output\",\n  CONTINUE = \"continue\",\n  END = \"end\",\n}\n\n/** Types of runtime stacks */\nexport enum RuntimeStackType {\n  CALL = \"Call\", // The amalgam \"call\" stack\n  CONSTRUCTION = \"Construction\", // The construction stack\n  INTERPRET_NODE = \"Interpret node\", // Standard debugger call stack\n}\n\n/** The types of breakpoints */\nexport enum RuntimeBreakpointType {\n  LINE = \"Line\", // Breakpoints on line/columns\n  OPCODES = \"Opcodes\", // Breakpoints on opcodes\n  LABEL = \"Label\", // Breakpoints on labels\n}\n\n/** Runtime breakpoint toggle responses */\nexport type IRuntimeBreakpointAction = \"added\" | \"removed\" | null;\n\n/** Base interface for runtime breakpoints */\nexport interface IRuntimeInternalBreakpoint {\n  line: number;\n  column: number;\n  path: string;\n}\n\n/** Representation of a standard runtime breakpoint */\nexport interface IRuntimeBreakpoint extends IRuntimeInternalBreakpoint {\n  id: number;\n  verified: boolean;\n}\n\n/** Representation of a single runtime stack frame */\nexport interface IRuntimeStackFrame {\n  index: number;\n  name: string;\n  file: string;\n  line: number;\n  column: number;\n  instruction?: number;\n}\n\n/** The runtime stack response */\nexport interface IRuntimeStack {\n  count: number;\n  frames: IRuntimeStackFrame[];\n}\n\n/** Supported runtime commands */\nexport type IRuntimeCommand =\n  | \"p\"\n  | \"c\"\n  | \"f\"\n  | \"fc\"\n  | \"s\"\n  | \"n\"\n  | \"br\"\n  | \"bn\"\n  | \"pv\"\n  | \"pp\"\n  | \"vars\"\n  | \"eval\"\n  | \"stack\"\n  | \"labels\"\n  | \"entity\"\n  | \"entities\"\n  | \"threads\"\n  | \"finish\"\n  | \"quit\";\n\n/** A runtime queued command task */\nexport interface IRuntimeTask {\n  command: IRuntimeCommand;\n  args: unknown[];\n  signal?: AbortSignal;\n}\n\n/** The result of a runtime command */\nexport type IRuntimeResult<T extends IRuntimeCommand = IRuntimeCommand> = T extends \"stack\"\n  ? { type: \"stack\"; stack: IRuntimeStack | undefined }\n  : T extends \"eval\" | \"pv\" | \"pp\" | \"p\" | \"entity\"\n  ? { type: \"eval\" | \"pv\" | \"pp\" | \"p\" | \"entity\"; value: string | undefined }\n  : T extends \"vars\" | \"labels\" | \"entities\"\n  ? { type: \"vars\" | \"labels\" | \"entities\"; values: string[] }\n  : T extends \"bn\"\n  ? { type: \"bn\"; action: IRuntimeBreakpointAction }\n  : T extends \"br\"\n  ? { type: \"br\"; breakpoints: IRuntimeInternalBreakpoint[] }\n  : T extends \"threads\"\n  ? { type: \"threads\"; threads: string[] }\n  : { type: IRuntimeCommand };\n\nexport type IRuntimeVariableType = string | RuntimeVariable[] | undefined;\nexport type IRuntimeVariableCategory = \"var\" | \"label\" | \"entity\";\n\nexport class RuntimeVariable {\n  public reference?: number;\n  public readonly category: IRuntimeVariableCategory = \"var\";\n\n  public get value() {\n    return this._value;\n  }\n\n  public set value(value: IRuntimeVariableType) {\n    this._lazy = false;\n    this._value = value;\n  }\n\n  public get lazy() {\n    return this._lazy;\n  }\n\n  constructor(public readonly name: string, private _value: IRuntimeVariableType, private _lazy = false) {}\n}\n\nexport class RuntimeLabel extends RuntimeVariable {\n  public readonly category: IRuntimeVariableCategory = \"label\";\n}\n\nexport class RuntimeEntity extends RuntimeVariable {\n  public readonly category: IRuntimeVariableCategory = \"entity\";\n}\n\nexport class AmalgamRuntime extends EventEmitter {\n  public static readonly DEFAULT_EXECUTABLE_DIRS = [\"~/.amalgam/bin/\"];\n  // Default thread id when running in ST mode\n  public static readonly DEFAULT_THREAD_ID = 1;\n\n  private cp: ChildProcessWithoutNullStreams | null = null;\n  private ignoreOutput = false;\n  private outputBuffer = \"\";\n  private debugStarted = new NotifySubject<null>();\n\n  private commandQueue: QueueObject<IRuntimeTask>;\n  private commandDone = new NotifySubject<IRuntimeResult>();\n  private activeCommand?: IRuntimeCommand;\n\n  // Maps from source to array of IRuntimeBreakpoint\n  private breakpoints = new Map<string, IRuntimeBreakpoint[]>();\n\n  // Each breakpoint will be assigned an id, this must be incremented on each use\n  private breakpointId = 1;\n\n  // Track current thread\n  private _currentThread = AmalgamRuntime.DEFAULT_THREAD_ID;\n\n  // Parsers for Amalgam process output\n  private matchers = {\n    end: /\\r\\r(?:(?<thread>[xa-fA-F0-9]+) )?>$/m,\n    stackFrameComment: /^ {2}comment:src: (?<line>\\d+) (?<column>\\d+) (?<file>.+)$/gm,\n    stackFrameOpcode: /^ {2}opcode: (?<opcode>.+?)(?: ;src: (?<line>\\d+) (?<column>\\d+) (?<file>.+))?$/gm,\n    breakpointAction: /^(?<action>Added|Removed) breakpoint for (?:.+)?$/gm,\n    breakpointLine: /^ {2}(?<line>\\d+)(?: (?<file>.+))?$/gm,\n    // Breakpoints and stack are matched via the header line and existing subsequent nested lines\n    breakpoints: /^(?<type>Line) Breakpoints:\\n(?<brs>^(?:\\s{2}.+)+)$/gm,\n    stack: /^(?<type>Interpret node) stack:\\n(?<frames>^(?:\\s{2}.+)+)$/gm,\n    // Expression results match all lines up to final empty line\n    expression: /^(?<value>[\\s\\S]+)\\n{2}$/gm,\n    // Results match all lines starting with 2 spaces\n    lines: /^ {2}(?<line>.+)$/gm,\n  };\n\n  /** If Amalgam debugger is running */\n  public get isRunning(): boolean {\n    return this.cp?.pid !== undefined;\n  }\n\n  public get currentThread(): number {\n    return this._currentThread;\n  }\n\n  public constructor() {\n    super();\n    // Initialize the command message queue\n    this.commandQueue = queue<IRuntimeTask, IRuntimeResult, Error>(async (task) => {\n      if (this.cp?.pid === undefined) {\n        throw new RuntimeNotStarted();\n      } else {\n        // Write out command and wait for response\n        if (task.signal?.aborted) {\n          throw new RuntimeCommandCancelled();\n        } else {\n          try {\n            this.activeCommand = task.command;\n            const command = [task.command, ...task.args].join(\" \");\n            logger.log(\"stdin\", command);\n            this.cp.stdin?.write(command + \"\\n\");\n            return await this.commandDone.wait();\n          } finally {\n            this.activeCommand = undefined;\n          }\n        }\n      }\n    }, 1);\n    this.commandQueue.pause();\n  }\n\n  public static getExecutableName(postfix: \"-st\" | \"-mt\" | \"\" = \"\"): string {\n    let name: string;\n    switch (platform()) {\n      case \"win32\":\n        name = `Amalgam${postfix}.exe`;\n        break;\n      default:\n        name = `amalgam${postfix}`;\n        break;\n    }\n    return name;\n  }\n\n  /**\n   * Start the runtime for debugging.\n   * @param launchOpts Amalgam launch options.\n   * @param stopOnEntry If debugger should stop on first opcode.\n   * @param debug If debug is enabled.\n   * @returns True if successfully started.\n   */\n  public async start(launchOpts: IRuntimeLaunchOptions, stopOnEntry: boolean, debug: boolean): Promise<boolean> {\n    this.ignoreOutput = false;\n\n    try {\n      this.cp = this.spawnAmalgam(launchOpts, debug);\n    } catch (error) {\n      logger.error(error);\n      return false;\n    }\n\n    if (!this.isRunning) {\n      return false;\n    }\n\n    let debugStarted: Promise<null> | undefined = undefined;\n    if (debug) {\n      debugStarted = this.debugStarted.wait();\n    }\n\n    // Handle output from Amalgam process\n    this.cp.stdout.on(\"data\", (data) => {\n      this.handleOutput(\"stdout\", data);\n    });\n    this.cp.stderr.on(\"data\", (data) => {\n      this.handleOutput(\"stderr\", data);\n    });\n\n    if (debug) {\n      if (debugStarted != null) {\n        await debugStarted;\n      }\n      await this.verifyBreakpoints();\n      if (stopOnEntry) {\n        this.sendEvent(RuntimeEvent.STOP_ON_ENTRY, this.currentThread);\n      } else {\n        this.continue();\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Terminate the runtime.\n   */\n  public terminate(): void {\n    this.commandQueue.kill();\n    this.commandDone.cancel();\n    if (this.cp?.pid) {\n      if (platform() === \"win32\") {\n        // Need to explicitly call taskkill on Windows so the process is stopped including any child\n        // processes it spawned\n        spawn(\"taskkill\", [\"/pid\", this.cp.pid.toString(), \"/f\", \"/t\"]);\n      } else {\n        this.cp.kill(\"SIGKILL\");\n      }\n    }\n\n    this.cp = null;\n  }\n\n  /**\n   * Quit running the program. Closing process gracefully.\n   * NOTE: Will continue running until next stopping point.\n   */\n  public async quit(): Promise<void> {\n    await this.sendCommand(\"quit\");\n  }\n\n  /**\n   * Finish running the program, leaving debug mode.\n   */\n  public async finish(): Promise<void> {\n    this.sendEvent(RuntimeEvent.CONTINUE, this.currentThread);\n    await this.sendCommand(\"finish\");\n  }\n\n  /**\n   * Continue to next breakpoint.\n   */\n  public async continue(): Promise<void> {\n    this.sendEvent(RuntimeEvent.CONTINUE, this.currentThread);\n    await this.sendCommand(\"c\");\n    this.sendEvent(RuntimeEvent.STOP_ON_BREAKPOINT, this.currentThread);\n  }\n\n  /**\n   * Step through code, runs to next opcode.\n   * @param instruction If step granularity is for instructions.\n   */\n  public async step(instruction: boolean): Promise<void> {\n    this.sendEvent(RuntimeEvent.CONTINUE, this.currentThread);\n    if (instruction) {\n      logger.warn(\"Step 'instruction' not yet implemented\");\n      await this.sendCommand(\"n\");\n    } else {\n      await this.sendCommand(\"n\");\n    }\n    this.sendEvent(RuntimeEvent.STOP_ON_STEP, this.currentThread);\n  }\n\n  /**\n   * Step into next opcode.\n   */\n  public async stepIn(): Promise<void> {\n    this.sendEvent(RuntimeEvent.CONTINUE, this.currentThread);\n    await this.sendCommand(\"s\");\n    this.sendEvent(RuntimeEvent.STOP_ON_STEP, this.currentThread);\n  }\n\n  /**\n   * Step out, finishing current opcode/call.\n   * @param instruction If step granularity is for instructions.\n   */\n  public async stepOut(instruction: boolean): Promise<void> {\n    this.sendEvent(RuntimeEvent.CONTINUE, this.currentThread);\n    if (instruction) {\n      await this.sendCommand(\"fc\");\n    } else {\n      await this.sendCommand(\"f\");\n    }\n    this.sendEvent(RuntimeEvent.STOP_ON_STEP, this.currentThread);\n  }\n\n  /**\n   * Get the current stack.\n   * @returns The current stack frames.\n   */\n  public async stack(): Promise<IRuntimeStack> {\n    const { stack } = await this.sendCommand(\"stack\");\n    if (stack == null) {\n      return { frames: [], count: 0 };\n    }\n    return stack;\n  }\n\n  /**\n   * Get in scope variables.\n   * @params signal Cancellation signal.\n   * @returns The in scope variables.\n   */\n  public async getVariables(signal?: AbortSignal): Promise<RuntimeVariable[]> {\n    try {\n      let { values } = await this.sendCommand(\"vars\", signal);\n      values = Array.from(new Set(values)).sort();\n\n      return await Promise.all(\n        values.map(async (v) => {\n          const { value } = await this.sendCommand(\"pp\", signal, v);\n          return new RuntimeVariable(v, value);\n        })\n      );\n    } catch (err) {\n      if (err instanceof RuntimeCommandCancelled) {\n        return [];\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Get variable value by name.\n   * @param name The name of the variable.\n   * @param asLabel If variable should be of category label.\n   * @returns The runtime variable value, or undefined if not set.\n   */\n  public async getVariable(name: string, asLabel = false): Promise<RuntimeVariable> {\n    const { value } = await this.sendCommand(\"p\", name);\n    if (asLabel) {\n      return new RuntimeLabel(name, value);\n    } else {\n      return new RuntimeVariable(name, value);\n    }\n  }\n\n  /**\n   * Get raw variable value by name.\n   * @param name The name of the variable.\n   * @param asLabel If variable should be of category label.\n   * @returns The runtime variable value (without comments), or undefined if not set.\n   */\n  public async getVariableRaw(name: string, asLabel = false): Promise<RuntimeVariable> {\n    const { value } = await this.sendCommand(\"pv\", name);\n    if (asLabel) {\n      return new RuntimeLabel(name, value);\n    } else {\n      return new RuntimeVariable(name, value);\n    }\n  }\n\n  /**\n   * Get raw variable preview. (value is truncated when over 1kb in size)\n   * @param name The name of the variable.\n   * @param asLabel If variable should be of category label.\n   * @returns The runtime variable value (without comments), or undefined if not set.\n   */\n  public async getVariablePreview(name: string, asLabel = false): Promise<RuntimeVariable> {\n    const { value } = await this.sendCommand(\"pp\", name);\n    if (asLabel) {\n      return new RuntimeLabel(name, value);\n    } else {\n      return new RuntimeVariable(name, value);\n    }\n  }\n\n  /**\n   * Set a variable value.\n   * @param variable The variable to update.\n   */\n  public async setVariable(variable: RuntimeVariable): Promise<void> {\n    let command = \"\";\n    switch (variable.category) {\n      case \"var\":\n        command = `(assign (assoc ${variable.name} ${variable.value}))`;\n        break;\n      case \"label\":\n        command = `(assign_to_entities (assoc ${variable.name} ${variable.value}))`;\n        break;\n      case \"entity\":\n        break;\n    }\n    if (command !== \"\") {\n      await this.sendCommand(\"eval\", command);\n    }\n  }\n\n  /**\n   * Get labels for entity.\n   * @param name The entity name. Uses current entity if not provided.\n   * @returns The labels as lazy variables.\n   */\n  public async getLabels(name?: string): Promise<RuntimeLabel[]> {\n    let values: string[];\n    if (name != null) {\n      ({ values = [] } = await this.sendCommand(\"labels\", name));\n    } else {\n      ({ values = [] } = await this.sendCommand(\"labels\"));\n    }\n    return values.sort().map((v) => new RuntimeLabel(v, undefined, true));\n  }\n\n  /**\n   * Get contained entities.\n   * @returns The contained entities.\n   */\n  public async getEntities(): Promise<RuntimeEntity[]> {\n    const { values = [] } = await this.sendCommand(\"entities\");\n    return values.sort().map((v) => new RuntimeEntity(v, undefined, true));\n  }\n\n  /**\n   * Get entity value by name.\n   * @param name The entity name.\n   * @returns The entity value.\n   */\n  public async getEntity(name: string): Promise<RuntimeEntity> {\n    const { value } = await this.sendCommand(\"entity\", name);\n    return new RuntimeEntity(name, value);\n  }\n\n  /**\n   * Evaluate an expression.\n   * @param expression The expression.\n   * @returns The expression result.\n   */\n  public async evaluate(expression: string): Promise<RuntimeVariable> {\n    const { value } = await this.sendCommand(\"eval\", expression);\n    return new RuntimeVariable(\"eval\", value);\n  }\n\n  /**\n   * Retrieve all thread IDs.\n   * @returns The list of thread IDs.\n   */\n  public async getThreadIds(): Promise<string[]> {\n    const { threads } = await this.sendCommand(\"threads\");\n    return threads;\n  }\n\n  /**\n   * Clear breakpoints.\n   * @param path The absolute source path to clear breakpoints for. If undefined, all breakpoints will be cleared.\n   */\n  public async clearBreakpoints(path?: string): Promise<void> {\n    let breakpoints: IRuntimeBreakpoint[] = [];\n    if (path == null) {\n      // All sources\n      for (const [, bps] of this.breakpoints) {\n        breakpoints.push(...bps);\n      }\n    } else {\n      // Single source\n      breakpoints = this.breakpoints.get(path) || [];\n    }\n\n    // Clear verified breakpoints\n    for (const br of breakpoints) {\n      if (br.verified) {\n        await this.sendCommand(\"bn\", br.line, br.path);\n      }\n    }\n\n    // Remove handles\n    if (path) {\n      this.breakpoints.delete(path);\n    } else {\n      this.breakpoints.clear();\n    }\n  }\n\n  /**\n   * Create a new breakpoint.\n   * @param path The absolute source path.\n   * @param line The line number of the breakpoint.\n   * @param column The column number of the breakpoint.\n   * @returns The breakpoint object.\n   */\n  public async setBreakPoint(path: string, line: number, column = 0): Promise<IRuntimeBreakpoint> {\n    const bp: IRuntimeBreakpoint = { verified: false, path, line, column, id: this.breakpointId++ };\n    let bps = this.breakpoints.get(path);\n    if (!bps) {\n      bps = new Array<IRuntimeBreakpoint>();\n      this.breakpoints.set(path, bps);\n    }\n    bps.push(bp);\n\n    if (this.isRunning) {\n      const { action } = await this.sendCommand(\"bn\", line, path);\n      if (action === \"added\") {\n        bp.verified = true;\n      }\n    }\n\n    return bp;\n  }\n\n  /**\n   * Verify breakpoints are set.\n   * @param path The absolute source path to verify.\n   */\n  private async verifyBreakpoints(path?: string): Promise<void> {\n    let breakpoints: IRuntimeBreakpoint[] = [];\n    if (path == null) {\n      // All sources\n      for (const [, bps] of this.breakpoints) {\n        breakpoints.push(...bps);\n      }\n    } else {\n      // Single source\n      breakpoints = this.breakpoints.get(path) || [];\n    }\n\n    for (const br of breakpoints) {\n      if (!br.verified) {\n        const { action } = await this.sendCommand(\"bn\", br.line, br.path);\n        if (action === \"added\") {\n          br.verified = true;\n          this.sendEvent(RuntimeEvent.BREAKPOINT_VALIDATED, br);\n        }\n      }\n    }\n  }\n\n  /**\n   * Spawn the Amalgam process.\n   * @param options Launch options.\n   * @returns The child process.\n   */\n  private spawnAmalgam(options: IRuntimeLaunchOptions, debug = true) {\n    const { executable, args = [], program } = options;\n    const allArgs = [...args, `\"${program}\"`];\n    if (debug) {\n      allArgs.unshift(\"--debug-minimal\", \"--debug-sources\");\n    }\n\n    logger.debug(\"Launch args:\", allArgs);\n    logger.debug(\"Launch cwd:\", options.cwd);\n\n    const child = spawn(`\"${executable}\"`, allArgs, {\n      cwd: options.cwd,\n      shell: true,\n      env: {\n        VSCODE_DEBUG_SESSION: \"1\",\n        ...options.env,\n      },\n    });\n    child.stdin?.setDefaultEncoding(\"utf8\");\n    child.stdout?.setEncoding(\"utf8\");\n    child.stderr?.setEncoding(\"utf8\");\n\n    // Log output\n    child.stdout?.on(\"data\", (data) => {\n      logger.log(\"stdout\", data);\n    });\n    child.stderr?.on(\"data\", (data) => {\n      logger.log(\"stderr\", data);\n    });\n    child.on(\"close\", (code) => {\n      logger.log(\"cpinfo\", `Child process exited with code: ${code}`);\n      this.sendEvent(RuntimeEvent.END);\n    });\n    child.on(\"error\", (error) => {\n      logger.log(\"cpinfo\", `cp.error:${error.message}`);\n    });\n    return child;\n  }\n\n  /**\n   * Send event to debugger session.\n   * @param event The event name.\n   * @param args Additional event arguments.\n   */\n  private sendEvent(event: RuntimeEvent, ...args: unknown[]): void {\n    this.emit(event, ...args);\n  }\n\n  /**\n   * Send command to the Amalgam runtime process.\n   * @param command The command to send.\n   * @param signal A cancel token signal.\n   * @param args Additional command arguments.\n   */\n  private async sendCommand<C extends IRuntimeCommand>(command: C, ...args: unknown[]): Promise<IRuntimeResult<C>>;\n  private async sendCommand<C extends IRuntimeCommand>(\n    command: C,\n    signal?: AbortSignal,\n    ...args: unknown[]\n  ): Promise<IRuntimeResult<C>> {\n    let task: IRuntimeTask;\n    if (signal instanceof AbortSignal) {\n      if (signal.aborted) {\n        throw new RuntimeCommandCancelled();\n      }\n      task = { command, args, signal };\n    } else {\n      // \"signal\" overloaded as first arg\n      if (signal !== undefined) {\n        args.unshift(signal);\n      }\n      task = { command, args };\n    }\n\n    return new Promise((resolve, reject) => {\n      this.commandQueue.push<IRuntimeResult<C>>(task, (err, response) => {\n        if (err) {\n          reject(err);\n        } else if (response === undefined) {\n          reject(new InvalidRuntimeResponse(\"Command response undefined\"));\n        } else {\n          resolve(response);\n        }\n      });\n    });\n  }\n\n  /**\n   * Handle stdout/stderr from child process.\n   * @param source The data source of the output.\n   * @param data The current buffer received from the stream.\n   */\n  private handleOutput(source: DataSource, data: string): void {\n    if (this.ignoreOutput) {\n      // Avoid handling output after debugging has stopped\n      return;\n    }\n\n    // Handle errors\n    if (source === \"stderr\") {\n      this.sendEvent(RuntimeEvent.OUTPUT, source, data);\n      return;\n    }\n\n    // Concatenate the data into the buffer\n    data = data.replaceAll(\"\\r\\n\", \"\\n\");\n    this.outputBuffer += data;\n\n    this.outputToDebugConsole(source, data);\n\n    const command = this.activeCommand;\n    let lines = this.outputBuffer;\n    let reg: RegExp;\n    let matches: RegExpExecArray | null;\n\n    // Check for end of data\n    reg = new RegExp(this.matchers.end);\n    const eot = reg.exec(lines);\n    if (eot == null) {\n      return;\n    } else {\n      // Remove termination characters\n      lines = lines.substring(0, eot.index) + lines.substring(eot.index + eot[0].length + 1);\n    }\n\n    if (eot.groups?.thread != null) {\n      this._currentThread = parseInt(eot.groups?.thread);\n    }\n\n    if (command == null) {\n      if (this.commandQueue.paused) {\n        // Consume initial startup output before issuing any commands\n        this.debugStarted.notify(null);\n        this.commandQueue.resume();\n      }\n      this.outputBuffer = \"\";\n      return;\n    }\n\n    // Match expression\n    let expressionResult: string | undefined = undefined;\n    if ([\"p\", \"pv\", \"pp\", \"eval\", \"entity\"].indexOf(command) >= 0) {\n      reg = new RegExp(this.matchers.expression);\n      while ((matches = reg.exec(lines)) != null) {\n        if (matches.groups) {\n          expressionResult = matches.groups.value;\n        }\n      }\n    }\n\n    // Match vars/labels/entities\n    const varsResult: string[] = [];\n    if ([\"vars\", \"labels\", \"entities\"].indexOf(command) >= 0) {\n      reg = new RegExp(this.matchers.lines);\n      while ((matches = reg.exec(lines)) != null) {\n        if (matches.groups) {\n          varsResult.push(matches.groups.line);\n        }\n      }\n    }\n\n    // Match list breakpoints\n    const breakpoints: IRuntimeInternalBreakpoint[] = [];\n    if (command === \"br\") {\n      reg = new RegExp(this.matchers.breakpoints);\n      while ((matches = reg.exec(lines)) != null) {\n        if (matches.groups) {\n          const type = matches.groups.type;\n          if (type === RuntimeBreakpointType.LINE) {\n            let brMatches: RegExpExecArray | null;\n            const sectionReg = new RegExp(this.matchers.breakpointLine);\n            while ((brMatches = sectionReg.exec(matches.groups.brs))) {\n              if (brMatches.groups) {\n                breakpoints.push({\n                  line: parseInt(brMatches.groups.line),\n                  column: 0,\n                  path: brMatches.groups.file,\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Match toggle breakpoint\n    let breakpointAction: IRuntimeBreakpointAction = null;\n    if (command === \"bn\") {\n      reg = new RegExp(this.matchers.breakpointAction);\n      while ((matches = reg.exec(lines)) != null) {\n        if (matches.groups) {\n          breakpointAction = matches.groups.action.toLowerCase() as IRuntimeBreakpointAction;\n        }\n      }\n    }\n\n    // Match stack\n    let stack: IRuntimeStack | undefined = undefined;\n    if (command === \"stack\") {\n      reg = new RegExp(this.matchers.stack);\n      while ((matches = reg.exec(lines)) != null) {\n        if (matches.groups) {\n          const type = matches.groups.type;\n          if (type !== RuntimeStackType.INTERPRET_NODE) {\n            continue;\n          }\n          let frameReg: RegExp;\n          let frameMatches: RegExpExecArray | null;\n          let index = 0;\n          const frames: IRuntimeStackFrame[] = [];\n          const opcodes: string[] = [];\n\n          // First collect all opcodes\n          frameReg = new RegExp(this.matchers.stackFrameOpcode);\n          while ((frameMatches = frameReg.exec(matches.groups.frames))) {\n            if (frameMatches.groups) {\n              opcodes.push(frameMatches.groups.opcode);\n            }\n          }\n\n          // Build the stack frame from the comment line\n          frameReg = new RegExp(this.matchers.stackFrameComment);\n          while ((frameMatches = frameReg.exec(matches.groups.frames))) {\n            if (frameMatches.groups) {\n              const opcode = opcodes[index];\n              const stackFrame: IRuntimeStackFrame = {\n                index: index++,\n                name: opcode,\n                line: parseInt(frameMatches.groups.line),\n                column: parseInt(frameMatches.groups.column),\n                file: frameMatches.groups.file,\n              };\n              frames.push(stackFrame);\n            }\n          }\n          stack = { frames: frames.reverse(), count: frames.length };\n        }\n      }\n    }\n\n    // Match threads\n    const threads: string[] = [];\n    if (command === \"threads\") {\n      reg = new RegExp(this.matchers.lines);\n      while ((matches = reg.exec(lines)) != null) {\n        if (matches.groups) {\n          threads.push(matches.groups.line);\n        }\n      }\n    }\n\n    // Clear the buffer\n    this.outputBuffer = \"\";\n\n    // Based on command executed, send appropriate event\n    switch (command) {\n      case \"stack\": {\n        this.commandDone.notify({\n          type: command,\n          stack,\n        });\n        break;\n      }\n      case \"threads\": {\n        this.commandDone.notify({\n          type: command,\n          threads,\n        });\n        break;\n      }\n      case \"p\":\n      case \"pv\":\n      case \"pp\":\n      case \"entity\":\n      case \"eval\": {\n        this.commandDone.notify({\n          type: command,\n          value: expressionResult,\n        });\n        break;\n      }\n      case \"entities\":\n      case \"labels\":\n      case \"vars\": {\n        this.commandDone.notify({\n          type: command,\n          values: varsResult,\n        });\n        break;\n      }\n      case \"bn\": {\n        this.commandDone.notify({\n          type: command,\n          action: breakpointAction,\n        });\n        break;\n      }\n      case \"br\": {\n        this.commandDone.notify({\n          type: command,\n          breakpoints,\n        });\n        break;\n      }\n      default:\n        this.commandDone.notify({ type: command });\n    }\n  }\n\n  protected outputToDebugConsole(source: DataSource, text: string): void {\n    switch (this.activeCommand) {\n      case undefined:\n      case \"c\":\n      case \"s\":\n      case \"n\":\n      case \"f\":\n      case \"fc\":\n      case \"finish\": {\n        // Remove termination characters\n        const reg = new RegExp(this.matchers.end);\n        const eot = reg.exec(text);\n        if (eot != null) {\n          text = text.substring(0, eot.index) + text.substring(eot.index + eot[0].length + 1);\n        }\n\n        if (text !== \"\") {\n          this.sendEvent(RuntimeEvent.OUTPUT, source, text);\n        }\n      }\n    }\n  }\n}\n","import * as vscode from \"vscode\";\nimport {\n  Logger,\n  logger,\n  LoggingDebugSession,\n  InitializedEvent,\n  TerminatedEvent,\n  StoppedEvent,\n  ContinuedEvent,\n  Breakpoint,\n  BreakpointEvent,\n  OutputEvent,\n  StackFrame,\n  Scope,\n  Source,\n  Thread,\n  Handles,\n} from \"@vscode/debugadapter\";\nimport { DebugProtocol } from \"@vscode/debugprotocol\";\nimport { platform } from \"os\";\nimport * as path from \"path\";\nimport { existsSync as fileExists } from \"fs\";\nimport { expandUserHome } from \"./utils\";\nimport { NotifySubject } from \"./utils/notify\";\nimport { AmalgamRuntime, IRuntimeBreakpoint, IRuntimeLaunchOptions, RuntimeEvent, RuntimeVariable } from \"./runtime\";\n\n/**\n * This interface describes the Amalgam specific launch attributes (which are not part of the Debug Adapter Protocol).\n * The schema for these attributes lives in the package.json and should always match this schema.\n */\ninterface ILaunchRequestArguments extends DebugProtocol.LaunchRequestArguments {\n  /** The path to the \"program\" to debug. */\n  program: string;\n  /** The absolute path to the amalgam executable (defaults to ~/.amalgam/bin/amalgam) */\n  executable?: string;\n  /** Additional cli arguments to pass to the amalgam executable. */\n  args?: string[];\n  /** A filepath to an amalgam trace file. */\n  tracefile?: string;\n  /** The program working directory */\n  workingDirectory?: string;\n  /** Automatically stop target after launch. If not specified, target does not stop. */\n  stopOnEntry?: boolean;\n  /** Enable logging the Debug Adapter Protocol. */\n  logging?: boolean;\n}\n\nexport class AmalgamDebugSession extends LoggingDebugSession {\n  private runtime: AmalgamRuntime;\n  private workingDirectory: string | undefined;\n\n  private configurationDone = new NotifySubject<null>();\n  private cancellationTokens = new Map<number, AbortController>();\n  private _variableHandles = new Handles<\"vars\" | \"labels\" | \"entities\" | RuntimeVariable>();\n\n  public readonly parentSession: vscode.DebugSession;\n\n  public constructor(session: vscode.DebugSession) {\n    super();\n    this.parentSession = session;\n\n    // this debugger uses zero-based lines and columns\n    this.setDebuggerLinesStartAt1(false);\n    this.setDebuggerColumnsStartAt1(false);\n\n    this.runtime = new AmalgamRuntime();\n\n    // Handle stop on program start\n    this.runtime.on(RuntimeEvent.STOP_ON_ENTRY, (threadId: number) => {\n      const event: DebugProtocol.StoppedEvent = new StoppedEvent(\"entry\", threadId);\n      event.body.allThreadsStopped = true;\n      this.sendEvent(event);\n    });\n\n    // Handle stop on stepping\n    this.runtime.on(RuntimeEvent.STOP_ON_STEP, (threadId: number) => {\n      const event: DebugProtocol.StoppedEvent = new StoppedEvent(\"step\", threadId);\n      event.body.allThreadsStopped = true;\n      this.sendEvent(event);\n    });\n\n    // Handle stop on hitting breakpoint\n    this.runtime.on(RuntimeEvent.STOP_ON_BREAKPOINT, (threadId: number) => {\n      const event: DebugProtocol.StoppedEvent = new StoppedEvent(\"breakpoint\", threadId);\n      event.body.allThreadsStopped = true;\n      this.sendEvent(event);\n    });\n\n    // Handle stop on raised exceptions\n    this.runtime.on(RuntimeEvent.STOP_ON_EXCEPTION, (exception, threadId: number) => {\n      let event: DebugProtocol.StoppedEvent;\n      if (exception) {\n        event = new StoppedEvent(`exception(${exception})`, threadId);\n      } else {\n        event = new StoppedEvent(\"exception\", threadId);\n      }\n      event.body.allThreadsStopped = true;\n      this.sendEvent(event);\n    });\n\n    // Update breakpoints when validated\n    this.runtime.on(RuntimeEvent.BREAKPOINT_VALIDATED, (bp: IRuntimeBreakpoint) => {\n      this.sendEvent(new BreakpointEvent(\"changed\", { verified: bp.verified, id: bp.id } as DebugProtocol.Breakpoint));\n    });\n\n    // Handle continuation\n    this.runtime.on(RuntimeEvent.CONTINUE, (threadId: number) => {\n      this.sendEvent(new ContinuedEvent(threadId, true));\n    });\n\n    // Handle debugger termination\n    this.runtime.on(RuntimeEvent.END, () => {\n      this.sendEvent(new TerminatedEvent());\n    });\n\n    // Handle output to debugger logs\n    this.runtime.on(\n      RuntimeEvent.OUTPUT,\n      (type: string, text: string, path?: string, line?: number, column?: number) => {\n        let category: string;\n        if (type === \"important\" || type === \"stdout\" || type === \"stderr\") {\n          category = type;\n        } else {\n          category = \"console\";\n        }\n        const evt: DebugProtocol.OutputEvent = new OutputEvent(`${text}`, category);\n        if (path) {\n          evt.body.source = this.createSource(path);\n        }\n        if (line) {\n          evt.body.line = this.convertDebuggerLineToClient(line);\n        }\n        if (column) {\n          evt.body.column = this.convertDebuggerColumnToClient(column);\n        }\n        this.sendEvent(evt);\n      }\n    );\n  }\n\n  protected async continueRequest(response: DebugProtocol.ContinueResponse): Promise<void> {\n    this.sendResponse(response);\n    await this.runtime.continue();\n  }\n\n  protected async nextRequest(response: DebugProtocol.NextResponse, args: DebugProtocol.NextArguments): Promise<void> {\n    this.sendResponse(response);\n    await this.runtime.step(args.granularity === \"instruction\");\n  }\n\n  protected async stepInRequest(response: DebugProtocol.StepInResponse): Promise<void> {\n    this.sendResponse(response);\n    await this.runtime.stepIn();\n  }\n\n  protected async stepOutRequest(\n    response: DebugProtocol.StepOutResponse,\n    args: DebugProtocol.StepOutArguments\n  ): Promise<void> {\n    this.sendResponse(response);\n    await this.runtime.stepOut(args.granularity === \"instruction\");\n  }\n\n  protected async setBreakPointsRequest(\n    response: DebugProtocol.SetBreakpointsResponse,\n    args: DebugProtocol.SetBreakpointsArguments\n  ): Promise<void> {\n    const sourcePath = this.convertPathToRuntime(args.source.path as string);\n    const clientBreakpoints = args.breakpoints || [];\n\n    // clear all breakpoints for this file\n    await this.runtime.clearBreakpoints(sourcePath);\n\n    // set and verify breakpoint locations\n    const allBreakpoints = await Promise.all(\n      clientBreakpoints.map(async (br) => {\n        const { verified, line, column, path, id } = await this.runtime.setBreakPoint(\n          sourcePath,\n          this.convertClientLineToDebugger(br.line),\n          br.column ? this.convertClientColumnToDebugger(br.column) : 0\n        );\n        const bp = new Breakpoint(\n          verified,\n          this.convertDebuggerLineToClient(line),\n          this.convertDebuggerColumnToClient(column),\n          this.createSource(path)\n        );\n        bp.setId(id);\n        return bp;\n      })\n    );\n\n    // send back the actual breakpoint positions\n    response.body = {\n      breakpoints: allBreakpoints,\n    };\n    this.sendResponse(response);\n  }\n\n  protected async stackTraceRequest(\n    response: DebugProtocol.StackTraceResponse,\n    args: DebugProtocol.StackTraceArguments\n  ): Promise<void> {\n    // Stack only available for current thread\n    if (this.runtime.currentThread != args.threadId) {\n      this.sendResponse(response);\n      return;\n    }\n\n    const stk = await this.runtime.stack();\n\n    response.body = {\n      stackFrames: stk.frames.map((f) => {\n        const sf: DebugProtocol.StackFrame = new StackFrame(\n          f.index,\n          f.name,\n          this.createSource(f.file),\n          this.convertDebuggerLineToClient(f.line),\n          this.convertDebuggerColumnToClient(f.column)\n        );\n        // if (typeof f.instruction === \"number\") {\n        //   const address = f.instruction;\n        //   sf.name = `${f.name} ${address}`;\n        //   sf.instructionPointerReference = address;\n        // }\n\n        // Subtly change appearance if frame is for a label\n        if (f.name.startsWith(\"#\")) {\n          sf.presentationHint = \"subtle\";\n        }\n\n        return sf;\n      }),\n      totalFrames: stk.count,\n    };\n    this.sendResponse(response);\n  }\n\n  protected async evaluateRequest(\n    response: DebugProtocol.EvaluateResponse,\n    args: DebugProtocol.EvaluateArguments\n  ): Promise<void> {\n    let reply: string | undefined;\n    let rv: RuntimeVariable | undefined;\n\n    switch (args.context) {\n      case \"repl\": {\n        const CMD_REGEXP = /^~(?<cmd>entities)(?: (?<args>.+))?$/i;\n        const match = CMD_REGEXP.exec(args.expression);\n        if (match?.groups) {\n          // Handle custom commands\n          switch (match.groups.cmd) {\n            case \"entities\": {\n              const entities = await this.runtime.getEntities();\n              reply = entities.map((e) => e.name).join(\"\\n\");\n              break;\n            }\n          }\n        } else {\n          // Evaluate expression\n          rv = await this.runtime.evaluate(args.expression);\n        }\n        break;\n      }\n      case \"watch\":\n        rv = await this.runtime.evaluate(args.expression);\n        break;\n      case \"variables\":\n      case \"hover\":\n      case \"clipboard\":\n      default: {\n        const [category, expr] = args.expression.split(\" \");\n        if (expr === undefined) {\n          // No category defined, category is expr\n          rv = await this.runtime.getVariablePreview(category);\n        } else {\n          if (category === \"entity\") {\n            rv = await this.runtime.getEntity(expr);\n          } else {\n            rv = await this.runtime.getVariablePreview(expr, category === \"label\");\n          }\n        }\n        break;\n      }\n    }\n\n    if (rv) {\n      const v = this.convertDebuggerVariableToClient(rv);\n      response.body = {\n        result: v.value,\n        variablesReference: v.variablesReference,\n        presentationHint: v.presentationHint,\n      };\n    } else {\n      response.body = {\n        result: reply || \"???\",\n        variablesReference: 0,\n      };\n    }\n\n    this.sendResponse(response);\n  }\n\n  protected scopesRequest(response: DebugProtocol.ScopesResponse): void {\n    response.body = {\n      scopes: [\n        new Scope(\"Variables\", this._variableHandles.create(\"vars\"), false),\n        new Scope(\"Labels\", this._variableHandles.create(\"labels\"), true),\n        new Scope(\"Entities\", this._variableHandles.create(\"entities\"), true),\n      ],\n    };\n    this.sendResponse(response);\n  }\n\n  protected async variablesRequest(\n    response: DebugProtocol.VariablesResponse,\n    args: DebugProtocol.VariablesArguments,\n    request?: DebugProtocol.Request\n  ): Promise<void> {\n    let vs: RuntimeVariable[] = [];\n\n    const cancelToken = new AbortController();\n    if (request) {\n      this.cancellationTokens.set(request.seq, cancelToken);\n    }\n\n    try {\n      const v = this._variableHandles.get(args.variablesReference);\n      if (v === \"vars\") {\n        vs = await this.runtime.getVariables(cancelToken.signal);\n      } else if (v === \"labels\") {\n        vs = await this.runtime.getLabels();\n      } else if (v === \"entities\") {\n        vs = await this.runtime.getEntities();\n      } else if (v != null) {\n        if (Array.isArray(v.value)) {\n          vs = v.value;\n        } else if (v.category === \"entity\") {\n          vs = [await this.runtime.getEntity(v.name)];\n        } else if (v.lazy) {\n          vs = [await this.runtime.getVariablePreview(v.name, v.category === \"label\")];\n        } else {\n          vs = [v];\n        }\n      }\n    } finally {\n      if (request) {\n        this.cancellationTokens.delete(request.seq);\n      }\n    }\n\n    response.body = {\n      variables: vs.map((v) => this.convertDebuggerVariableToClient(v)),\n    };\n    this.sendResponse(response);\n  }\n\n  protected async setVariableRequest(\n    response: DebugProtocol.SetVariableResponse,\n    args: DebugProtocol.SetVariableArguments\n  ): Promise<void> {\n    const container = this._variableHandles.get(args.variablesReference);\n\n    let rv: RuntimeVariable | undefined = undefined;\n\n    if (container === \"vars\") {\n      rv = await this.runtime.getVariablePreview(args.name);\n    } else if (container === \"labels\") {\n      rv = await this.runtime.getVariablePreview(args.name, true);\n    } else if (container instanceof RuntimeVariable) {\n      if (Array.isArray(container.value)) {\n        rv = container.value.find((v) => v.name === args.name);\n      } else {\n        rv = container;\n      }\n    }\n\n    if (rv) {\n      rv.value = args.value;\n      await this.runtime.setVariable(rv);\n      response.body = this.convertDebuggerVariableToClient(rv);\n    }\n\n    this.sendResponse(response);\n  }\n\n  protected cancelRequest(response: DebugProtocol.CancelResponse, args: DebugProtocol.CancelArguments) {\n    if (args.requestId) {\n      const cancelToken = this.cancellationTokens.get(args.requestId);\n      cancelToken?.abort();\n    }\n  }\n\n  /**\n   * Called at the end of the configuration sequence.\n   * Indicates that all breakpoints etc. have been sent to the DA and that the 'launch' can start.\n   */\n  protected configurationDoneRequest(\n    response: DebugProtocol.ConfigurationDoneResponse,\n    args: DebugProtocol.ConfigurationDoneArguments\n  ): void {\n    super.configurationDoneRequest(response, args);\n\n    // notify the launchRequest that configuration has finished\n    this.configurationDone.notify(null);\n  }\n\n  /**\n   * The 'initialize' request is the first request called by the frontend\n   * to interrogate the features the debug adapter provides.\n   */\n  protected initializeRequest(response: DebugProtocol.InitializeResponse): void {\n    // build and return the capabilities of this debug adapter:\n    response.body = response.body || {};\n\n    response.body.supportsConfigurationDoneRequest = true;\n    response.body.supportsCancelRequest = true;\n    response.body.supportSuspendDebuggee = false;\n    response.body.supportTerminateDebuggee = true;\n\n    response.body.supportsSetVariable = true;\n    response.body.supportsSteppingGranularity = true;\n\n    // make VS Code use 'evaluate' when hovering over source\n    response.body.supportsEvaluateForHovers = true;\n\n    // support completions in REPL\n    response.body.supportsCompletionsRequest = true;\n    response.body.completionTriggerCharacters = [\"~\"];\n\n    // make VS Code support different breakpoint types\n    response.body.supportsDataBreakpoints = false;\n    response.body.supportsFunctionBreakpoints = false;\n    response.body.supportsInstructionBreakpoints = false;\n    response.body.supportsConditionalBreakpoints = false;\n\n    this.sendResponse(response);\n\n    // Since this debug adapter can accept configuration requests like 'setBreakpoint' at any time,\n    // we request them early by sending an 'initializeRequest' to the frontend.\n    // The frontend will end the configuration sequence by calling 'configurationDone' request.\n    this.sendEvent(new InitializedEvent());\n  }\n\n  protected completionsRequest(response: DebugProtocol.CompletionsResponse): void {\n    response.body = {\n      targets: [\n        {\n          label: \"entities\",\n          detail: \"Print out the contained entities.\",\n          type: \"method\",\n        },\n      ],\n    };\n    this.sendResponse(response);\n  }\n\n  protected async launchRequest(response: DebugProtocol.LaunchResponse, args: ILaunchRequestArguments) {\n    // make sure to 'Stop' the buffered logging if 'logging' is not set\n    logger.setup(args.logging ? Logger.LogLevel.Verbose : Logger.LogLevel.Stop, false);\n\n    // Validate executable\n    const executable = this.getExecutablePath(args.executable);\n    if (executable == null) {\n      this.sendErrorResponse(response, {\n        id: 2,\n        format: `No Amalgam executable not found at path: ${\n          args.executable || AmalgamRuntime.DEFAULT_EXECUTABLE_DIRS.join(\" or \")\n        }`,\n        showUser: true,\n      });\n      return;\n    }\n\n    // Validate working directory\n    const workingDirectory = args.workingDirectory ? expandUserHome(args.workingDirectory) : undefined;\n    if (workingDirectory != null && !fileExists(workingDirectory)) {\n      this.sendErrorResponse(response, {\n        id: 2,\n        format: `The provided working directory does not exist: ${workingDirectory}`,\n        showUser: true,\n      });\n      return;\n    }\n\n    // Resolve working directory and program file paths\n    let program = expandUserHome(args.program);\n    if (workingDirectory) {\n      program = path.resolve(workingDirectory, program);\n    }\n    const programUri = vscode.Uri.parse(program);\n    const workspaceUri = vscode.workspace.getWorkspaceFolder(programUri)?.uri;\n    const cwd = workingDirectory || path.dirname(programUri.fsPath);\n    const runtimeArgs: string[] = args.args || [];\n\n    this.workingDirectory = cwd || workspaceUri?.fsPath;\n\n    // wait 1 second until configuration has finished (and configurationDone has been called)\n    await this.configurationDone.wait(1000);\n\n    if (args.tracefile) {\n      const tracefile = cwd ? path.resolve(cwd, args.tracefile) : args.tracefile;\n      runtimeArgs.push(\"--tracefile\", `\"${tracefile}\"`);\n    }\n\n    const startArgs: IRuntimeLaunchOptions = {\n      cwd,\n      executable,\n      args: runtimeArgs,\n      program: programUri.fsPath,\n    };\n\n    // start the program in the runtime\n    const started = await this.runtime.start(startArgs, !!args.stopOnEntry, !args.noDebug);\n\n    if (started) {\n      this.sendResponse(response);\n    } else {\n      this.sendErrorResponse(response, {\n        id: 1001,\n        format: `error: failed to start amalgam runtime`,\n        showUser: true,\n      });\n    }\n  }\n\n  protected disconnectRequest(\n    response: DebugProtocol.DisconnectResponse,\n    args: DebugProtocol.DisconnectArguments\n  ): void {\n    if (args.terminateDebuggee) {\n      this.runtime?.terminate();\n    }\n  }\n\n  protected async threadsRequest(response: DebugProtocol.ThreadsResponse): Promise<void> {\n    const threadIds = await this.runtime.getThreadIds();\n    if (threadIds.length > 0) {\n      response.body = {\n        threads: threadIds.map((threadId) => new Thread(parseInt(threadId), `thread ${threadId}`)),\n      };\n    } else {\n      response.body = {\n        threads: [new Thread(AmalgamRuntime.DEFAULT_THREAD_ID, \"main\")],\n      };\n    }\n    this.sendResponse(response);\n  }\n\n  /**\n   * Resolve path to an amalgam executable.\n   * @param path Custom specified path.\n   * @returns The resolved path to an Amalgam executable, or undefined if no valid path found.\n   */\n  private getExecutablePath(filePath?: string): string | undefined {\n    if (filePath == null) {\n      // Find amongst the default directories\n      const executableName = AmalgamRuntime.getExecutableName();\n      for (const dir of AmalgamRuntime.DEFAULT_EXECUTABLE_DIRS) {\n        filePath = path.resolve(expandUserHome(dir), executableName);\n        if (fileExists(filePath)) {\n          return filePath;\n        }\n      }\n    } else {\n      // Configured path\n      filePath = path.resolve(expandUserHome(filePath));\n      if (fileExists(filePath)) {\n        return filePath;\n      }\n    }\n    return undefined;\n  }\n\n  private createSource(filePath: string): Source {\n    if (this.workingDirectory) {\n      filePath = path.resolve(this.workingDirectory, filePath);\n    }\n    return new Source(path.basename(filePath), this.convertDebuggerPathToClient(filePath));\n  }\n\n  protected convertPathToRelative(filePath: string): string {\n    if (this.workingDirectory) {\n      filePath = path.relative(this.workingDirectory, filePath);\n    }\n    return filePath;\n  }\n\n  protected convertPathToRuntime(filePath: string): string {\n    filePath = this.convertClientPathToDebugger(filePath);\n    if (this.workingDirectory) {\n      filePath = path.resolve(this.workingDirectory, filePath);\n    }\n    if (platform() == \"win32\") {\n      filePath = path.win32.normalize(filePath);\n      return filePath.charAt(0).toUpperCase() + filePath.slice(1);\n    } else {\n      return path.normalize(filePath);\n    }\n  }\n\n  protected convertDebuggerVariableToClient(variable: RuntimeVariable): DebugProtocol.Variable {\n    const dapVariable: DebugProtocol.Variable = {\n      name: variable.name,\n      value: \"???\",\n      variablesReference: 0,\n      evaluateName: `${variable.category} ${variable.name}`,\n    };\n    if (variable.lazy) {\n      variable.reference ??= this._variableHandles.create(variable);\n      dapVariable.variablesReference = variable.reference;\n      dapVariable.value = \"\";\n      dapVariable.presentationHint = {\n        lazy: variable.lazy,\n      };\n    } else {\n      if (Array.isArray(variable.value)) {\n        dapVariable.value = \"Object\";\n        variable.reference ??= this._variableHandles.create(variable);\n        dapVariable.variablesReference = variable.reference;\n      } else if (variable.value != null) {\n        dapVariable.value = variable.value;\n      }\n    }\n    return dapVariable;\n  }\n}\n","import { homedir } from \"os\";\n\nexport function expandUserHome(filePath: string): string {\n  if (!filePath || typeof filePath !== \"string\") {\n    return \"\";\n  }\n\n  if (filePath.startsWith(\"~/\") || filePath === \"~\") {\n    return filePath.replace(\"~\", homedir());\n  }\n\n  return filePath;\n}\n","/**\n * Waiter awaiting for notification.\n */\nexport class NotifyWaiter<T = unknown> {\n  private timeout?: NodeJS.Timeout;\n  private _resolved = false;\n\n  public constructor(private resolveFunc: (value?: T) => void, private cancelFunc: () => void, timeout?: number) {\n    if (timeout != null) {\n      this.timeout = setTimeout(() => this.resolve(undefined), timeout);\n    }\n  }\n\n  /** Check if waiter resolved. */\n  public get resolved() {\n    return this._resolved;\n  }\n\n  /**\n   * Resolve this waiter.\n   * @param value The value from notifier.\n   */\n  public resolve(value?: T) {\n    if (!this.resolved) {\n      clearTimeout(this.timeout);\n      this.resolveFunc(value);\n      this._resolved = true;\n    }\n  }\n\n  /**\n   * Cancel this waiter.\n   */\n  public cancel() {\n    if (!this.resolved) {\n      clearTimeout(this.timeout);\n      this.cancelFunc();\n      this._resolved = true;\n    }\n  }\n}\n\n/**\n * Wait until notified or timeout.\n */\nexport class NotifySubject<T = unknown> {\n  public waiters: NotifyWaiter<T>[] = [];\n\n  /**\n   * Wait for notify.\n   * @param timeout Maximum time to wait for notification, if not provided does not timeout.\n   */\n  public async wait(): Promise<T>;\n  public async wait(timeout: number): Promise<T | undefined>;\n  public async wait(timeout?: number): Promise<T | undefined> {\n    return new Promise<T | undefined>((resolve, reject) => {\n      const waiter = new NotifyWaiter<T>(\n        (value?: T) => {\n          this.remove(waiter);\n          resolve(value);\n        },\n        () => {\n          this.remove(waiter);\n          reject(\"cancelled\");\n        },\n        timeout\n      );\n      this.waiters.push(waiter);\n    });\n  }\n\n  /**\n   * Remove a waiter.\n   * @param waiter The waiter to remove.\n   */\n  private remove(waiter: NotifyWaiter<T>): void {\n    const pos = this.waiters.indexOf(waiter);\n    if (pos >= 0) {\n      this.waiters.splice(pos, 1);\n    }\n  }\n\n  /**\n   * Notify all waiters.\n   * @param value The value to send to waiters.\n   */\n  public notify(value: T) {\n    for (const waiter of this.waiters) {\n      waiter.resolve(value);\n    }\n  }\n\n  /**\n   * Cancel all waiters.\n   */\n  public cancel() {\n    for (const waiter of this.waiters) {\n      waiter.cancel();\n    }\n  }\n}\n","import * as vscode from \"vscode\";\nimport { AmalgamDocumentSymbolProvider } from \"./symbols\";\n\n/**\n * Activate language features.\n * @param context The VS Code extension context.\n */\nexport function activateLanguage(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.languages.registerDocumentSymbolProvider(\n      { scheme: \"file\", language: \"amalgam\" },\n      new AmalgamDocumentSymbolProvider()\n    )\n  );\n}\n","import * as vscode from \"vscode\";\n\nexport class AmalgamDocumentSymbolProvider implements vscode.DocumentSymbolProvider {\n  public provideDocumentSymbols(\n    document: vscode.TextDocument,\n    token: vscode.CancellationToken\n  ): vscode.ProviderResult<vscode.SymbolInformation[] | vscode.DocumentSymbol[]> {\n    return new Promise((resolve, reject) => {\n      const symbols: vscode.DocumentSymbol[] = [];\n      let symbol: vscode.DocumentSymbol | null = null;\n      let prevSymbol: vscode.DocumentSymbol | null = null;\n\n      const updatePrevSymbol = (line: number) => {\n        if (prevSymbol != null) {\n          // Capture previous symbol's range to be up to this symbol's start\n          prevSymbol.range = new vscode.Range(prevSymbol.range.start, new vscode.Position(line, 0));\n          prevSymbol = null;\n        }\n      };\n\n      for (let i = 0; i < document.lineCount; i++) {\n        if (token.isCancellationRequested) {\n          reject(\"cancelled\");\n          return;\n        }\n\n        const line = document.lineAt(i);\n        if (symbol) {\n          // Look ahead to see if label's nested value is a variable\n          if (/^\\s*(?:;.*)?$/.test(line.text)) {\n            // Blank or comment line\n            continue;\n          }\n\n          const reg = /^\\s*(.+)\\s*.*$/;\n          const matches = reg.exec(line.text);\n          if (matches) {\n            symbol.kind = this.checkType(matches[1], vscode.SymbolKind.Function);\n          }\n\n          updatePrevSymbol(i);\n          prevSymbol = symbol;\n          symbols.push(symbol);\n          symbol = null; // reset to look for next label\n        } else {\n          // Match label\n          // 1: Leading text up to and including #\n          // 2: The opcode\n          // 3: Tailing text to end of line\n          const reg = /^(\\s*#)[\\^!]?(\\w+)\\s*(.*)?\\s*$/;\n          const matches = reg.exec(line.text);\n\n          if (matches) {\n            const symbolRange = new vscode.Range(i, matches[1].length, i, line.range.end.character);\n            const selectionRange = new vscode.Range(i, matches[1].length, i, matches[1].length + matches[2].length);\n            symbol = new vscode.DocumentSymbol(matches[2], \"\", vscode.SymbolKind.Function, symbolRange, selectionRange);\n\n            // Treat as variable when value is on same line\n            if (matches[3]) {\n              updatePrevSymbol(i);\n              symbol.kind = this.checkType(matches[3], vscode.SymbolKind.Variable);\n              symbols.push(symbol);\n              symbol = null; // reset to look for next label\n            }\n          }\n        }\n      }\n      updatePrevSymbol(document.lineCount);\n      resolve(symbols);\n    });\n  }\n\n  private checkType(text: string, defaultKind: vscode.SymbolKind) {\n    if (/^(?:[\"'](?:[^\"\\\\]|\\\\.)*[\"']|\\.nas)(?:\\s*;.*)?$/.test(text)) {\n      return vscode.SymbolKind.String;\n    } else if (/^(?:\\d+\\.?\\d*|\\.nan|-?\\.infinity)(?:\\s*;.*)?$/.test(text)) {\n      return vscode.SymbolKind.Number;\n    } else if (/^\\((?:true|false)\\)(?:\\s*;.*)?$/i.test(text)) {\n      return vscode.SymbolKind.Boolean;\n    } else if (/^\\(list(?:\\s.*)?$/i.test(text)) {\n      return vscode.SymbolKind.Array;\n    } else if (/^\\(assoc(?:\\s.*)?$/i.test(text)) {\n      return vscode.SymbolKind.Object;\n    } else if (/^\\(null\\)(?:\\s*;.*)?$/i.test(text)) {\n      return vscode.SymbolKind.Variable;\n    }\n    return defaultKind;\n  }\n}\n","import * as vscode from \"vscode\";\n\nexport type SourceName = \"stdin\" | \"stdout\" | \"stderr\" | \"info\" | \"warn\" | \"debug\" | \"error\" | \"cpinfo\" | \"\";\n\nexport class Logger {\n  private sourceLength = 8;\n\n  constructor(public outputLine: (txt: string) => void) {}\n\n  private logLine(source: SourceName, text: string): void {\n    if (!text) {\n      return;\n    }\n    const lines = text.replace(/\\r/g, \"\").split(\"\\n\");\n    if (lines.length && lines[lines.length - 1] === \"\") {\n      // Remove final blank line\n      lines.pop();\n    }\n    const ts = getTimeStamp();\n    const src = source.padEnd(this.sourceLength, \" \");\n\n    for (const line of lines) {\n      this.outputLine(`${ts} [${src}] ${line}`);\n    }\n  }\n\n  public logText(source: SourceName, ...txt: string[]): void {\n    txt.map((t) => this.logLine(source, t));\n  }\n\n  public log(source: SourceName, ...msg: unknown[]): void {\n    const text = msg.map((m) => forceString(m));\n    this.logLine(source, text.join(\" \"));\n  }\n\n  public info(...msg: unknown[]): void {\n    this.log(\"info\", ...msg);\n  }\n\n  public warn(...msg: unknown[]): void {\n    this.log(\"warn\", ...msg);\n  }\n\n  public debug(...msg: unknown[]): void {\n    this.log(\"debug\", ...msg);\n  }\n\n  public error(...msg: unknown[]): void {\n    this.log(\"error\", ...msg);\n  }\n}\n\nfunction makeVsCodeLogger(): Logger {\n  const outputChannel = vscode.window.createOutputChannel(\"Amalgam Runtime\");\n  const logger = new Logger((text: string) => outputChannel.appendLine(text));\n  return logger;\n}\n\nfunction getTimeStamp(): string {\n  const date = new Date();\n  const s = date.toISOString().replace(/^.*T(.*)Z$/, \"$1\");\n  return s;\n}\n\nfunction forceString(x: unknown): string {\n  if (typeof x === \"string\") {\n    return x;\n  } else if (x instanceof Buffer) {\n    return String(x);\n  } else if (typeof x === \"object\") {\n    return JSON.stringify(x);\n  } else {\n    return String(x);\n  }\n}\n\nexport const logger = makeVsCodeLogger();\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"url\");","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * //Using Callbacks\n * async.auto({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     if (err) {\n *         console.log('err = ', err);\n *     }\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * });\n *\n * //Using Promises\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }).then(results => {\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * }).catch(err => {\n *     console.log('err = ', err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.auto({\n *             get_data: function(callback) {\n *                 // async code to get some data\n *                 callback(null, 'data', 'converted to array');\n *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n *                 // once there is some data and the directory exists,\n *                 // write the data to a file in the directory\n *                 callback(null, 'filename');\n *             }],\n *             email_link: ['write_file', function(results, callback) {\n *                 // once the file is written let's email a link to it...\n *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *             }]\n *         });\n *         console.log('results = ', results);\n *         // results = {\n *         //     get_data: ['data', 'converted to array']\n *         //     make_folder; 'folder',\n *         //     write_file: 'filename'\n *         //     email_link: { file: 'filename', email: 'user@example.com' }\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\n\nfunction stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n        if (string[index] === '/' && string[index+1] === '/') {\n            // inline comment\n            let endIndex = string.indexOf('\\n', index);\n            index = (endIndex === -1) ? string.length : endIndex;\n        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n            // block comment\n            let endIndex = string.indexOf('*/', index);\n            if (endIndex !== -1) {\n                index = endIndex + 2;\n                endBlockComment = string.indexOf('*/', index);\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        } else {\n            stripped += string[index];\n            index++;\n        }\n    }\n    return stripped;\n}\n\nfunction parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = q._createTaskItem(\n            data,\n            rejectOnError ? promiseCallback :\n                (callback || promiseCallback)\n        );\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        _createTaskItem (data, callback) {\n            return {\n                data,\n                callback\n            };\n        },\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // dir1/file1.txt\n *        // result now equals the first file in the list that exists\n *    }\n *);\n *\n * // Using Promises\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n * .then(result => {\n *     console.log(result);\n *     // dir1/file1.txt\n *     // result now equals the first file in the list that exists\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n *         console.log(result);\n *         // dir1/file1.txt\n *         // result now equals the file in the list that exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n            /* istanbul ignore else */\n            if (err) {\n                /* istanbul ignore else */\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) { /* istanbul ignore else */\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.every(fileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * });\n *\n * async.every(withMissingFileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * });\n *\n * // Using Promises\n * async.every(fileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.every(withMissingFileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.every(fileList, fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.every(withMissingFileList, fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since NOT every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.filter(files, fileExists, function(err, results) {\n *    if(err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *        // results is now an array of the existing files\n *    }\n * });\n *\n * // Using Promises\n * async.filter(files, fileExists)\n * .then(results => {\n *     console.log(results);\n *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *     // results is now an array of the existing files\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.filter(files, fileExists);\n *         console.log(results);\n *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *         // results is now an array of the existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const files = ['dir1/file1.txt','dir2','dir4']\n *\n * // asynchronous function that detects file type as none, file, or directory\n * function detectFile(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(null, 'none');\n *         }\n *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n *     });\n * }\n *\n * //Using callbacks\n * async.groupBy(files, detectFile, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *\t       console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n * });\n *\n * // Using Promises\n * async.groupBy(files, detectFile)\n * .then( result => {\n *     console.log(result);\n *     // {\n *     //     file: [ 'dir1/file1.txt' ],\n *     //     none: [ 'dir4' ],\n *     //     directory: [ 'dir2']\n *     // }\n *     // result is object containing the files grouped by type\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.groupBy(files, detectFile);\n *         console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whose\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file3.txt'\n * };\n *\n * const withMissingFileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file4.txt'\n * };\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, key, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n * });\n *\n * // Error handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.mapValues(fileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // result is now a map of file size in bytes for each file, e.g.\n *     // {\n *     //     f1: 1000,\n *     //     f2: 2000,\n *     //     f3: 3000\n *     // }\n * }).catch (err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch (err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/* istanbul ignore file */\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n *\n * //Using Callbacks\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.parallel([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two'] even though\n *         // the second function had a shorter timeout.\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction parallel$1(tasks, callback) {\n    return parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n *   except this returns a promise that rejects if an error occurs.\n * * The `unshift` and `unshiftAsync` methods were removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    var {\n        push,\n        pushAsync\n    } = q;\n\n    q._tasks = new Heap();\n    q._createTaskItem = ({data, priority}, callback) => {\n        return {\n            data,\n            priority,\n            callback\n        };\n    };\n\n    function createDataItems(tasks, priority) {\n        if (!Array.isArray(tasks)) {\n            return {data: tasks, priority};\n        }\n        return tasks.map(data => { return {data, priority}; });\n    }\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback) {\n        return push(createDataItems(data, priority), callback);\n    };\n\n    q.pushAsync = function(data, priority = 0, callback) {\n        return pushAsync(createDataItems(data, priority), callback);\n    };\n\n    // Remove unshift functions\n    delete q.unshift;\n    delete q.unshiftAsync;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // true\n *        // result is true since some file in the list exists\n *    }\n *);\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // false\n *        // result is false since none of the files exists\n *    }\n *);\n *\n * // Using Promises\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since some file in the list exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since none of the files exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since some file in the list exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since none of the files exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * // bigfile.txt is a file that is 251100 bytes in size\n * // mediumfile.txt is a file that is 11000 bytes in size\n * // smallfile.txt is a file that is 121 bytes in size\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) return callback(getFileSizeErr);\n *         callback(null, fileSize);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // descending order\n * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) {\n *             return callback(getFileSizeErr);\n *         }\n *         callback(null, fileSize * -1);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n *         }\n *     }\n * );\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *             // [ Error: ENOENT: no such file or directory ]\n *         } else {\n *             console.log(results);\n *         }\n *     }\n * );\n *\n * // Using Promises\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now the original array of files sorted by\n *     // file size (ascending by default), e.g.\n *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *         // results is now the original array of files sorted by\n *         // file size (ascending by default), e.g.\n *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * // Error handling\n * async () => {\n *     try {\n *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel: parallel$1,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel$1 as parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as vscode from \"vscode\";\nimport { activateDebug } from \"./debugger/activate\";\nimport { activateLanguage } from \"./language/activate\";\nimport { InlineDebugAdapterFactory, ExternalDebugAdapterFactory } from \"./debugger/factory\";\n\n/*\n * The compile time flag 'runMode' controls how the debug adapter is run.\n */\nconst runMode: \"external\" | \"inline\" = \"inline\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  // debug adapters can be run in different ways by using a vscode.DebugAdapterDescriptorFactory:\n  switch (runMode) {\n    case \"inline\":\n      // Run the debug adapter inside the extension and directly talk to it\n      activateDebug(context, new InlineDebugAdapterFactory());\n      break;\n    case \"external\":\n      // Run the debug adapter as a separate process\n      activateDebug(context, new ExternalDebugAdapterFactory());\n      break;\n    default:\n      throw new Error(`Run mode '${runMode}' not implemented`);\n  }\n  // language features\n  activateLanguage(context);\n}\n\nexport function deactivate() {\n  // nothing to do\n}\n"],"names":["Object","defineProperty","exports","value","DebugSession","ErrorDestination","MemoryEvent","InvalidatedEvent","ProgressEndEvent","ProgressUpdateEvent","ProgressStartEvent","CapabilitiesEvent","LoadedSourceEvent","ModuleEvent","BreakpointEvent","ThreadEvent","OutputEvent","ExitedEvent","TerminatedEvent","InitializedEvent","ContinuedEvent","StoppedEvent","CompletionItem","Module","Breakpoint","Variable","Thread","StackFrame","Scope","Source","protocol_1","messages_1","runDebugAdapter_1","url_1","constructor","name","path","id","origin","data","this","sourceReference","adapterData","reference","expensive","variablesReference","i","nm","src","ln","col","source","line","column","ref","indexedVariables","namedVariables","verified","e","setId","label","start","length","Event","reason","threadId","exceptionText","super","body","text","allThreadsContinued","restart","exitCode","output","category","undefined","breakpoint","module","capabilities","progressId","title","message","areas","stackFrameId","memoryReference","offset","count","ProtocolServer","obsolete_debuggerLinesAndColumnsStartAt1","obsolete_isServer","linesAndColumnsStartAt1","_debuggerLinesStartAt1","_debuggerColumnsStartAt1","_debuggerPathsAreURIs","_clientLinesStartAt1","_clientColumnsStartAt1","_clientPathsAreURIs","_isServer","on","shutdown","error","setDebuggerPathFormat","format","setDebuggerLinesStartAt1","enable","setDebuggerColumnsStartAt1","setRunAsServer","run","debugSession","runDebugAdapter","_isRunningInline","setTimeout","process","exit","sendErrorResponse","response","codeOrMessage","variables","dest","User","msg","showUser","Telemetry","sendTelemetry","success","formatPII","sendResponse","runInTerminalRequest","args","timeout","cb","sendRequest","dispatchRequest","request","Response","command","arguments","linesStartAt1","columnsStartAt1","pathFormat","initializeResponse","initializeRequest","launchRequest","attachRequest","disconnectRequest","terminateRequest","restartRequest","setBreakPointsRequest","setFunctionBreakPointsRequest","setExceptionBreakPointsRequest","configurationDoneRequest","continueRequest","nextRequest","stepInRequest","stepOutRequest","stepBackRequest","reverseContinueRequest","restartFrameRequest","gotoRequest","pauseRequest","stackTraceRequest","scopesRequest","variablesRequest","setVariableRequest","setExpressionRequest","sourceRequest","threadsRequest","terminateThreadsRequest","evaluateRequest","stepInTargetsRequest","gotoTargetsRequest","completionsRequest","exceptionInfoRequest","loadedSourcesRequest","dataBreakpointInfoRequest","setDataBreakpointsRequest","readMemoryRequest","writeMemoryRequest","disassembleRequest","cancelRequest","breakpointLocationsRequest","setInstructionBreakpointsRequest","customRequest","_exception","_stack","stack","supportsConditionalBreakpoints","supportsHitConditionalBreakpoints","supportsFunctionBreakpoints","supportsConfigurationDoneRequest","supportsEvaluateForHovers","supportsStepBack","supportsSetVariable","supportsRestartFrame","supportsStepInTargetsRequest","supportsGotoTargetsRequest","supportsCompletionsRequest","supportsRestartRequest","supportsExceptionOptions","supportsValueFormattingOptions","supportsExceptionInfoRequest","supportTerminateDebuggee","supportsDelayedStackTraceLoading","supportsLoadedSourcesRequest","supportsLogPoints","supportsTerminateThreadsRequest","supportsSetExpression","supportsTerminateRequest","supportsDataBreakpoints","supportsReadMemoryRequest","supportsDisassembleRequest","supportsCancelRequest","supportsBreakpointLocationsRequest","supportsClipboardContext","supportsSteppingGranularity","supportsInstructionBreakpoints","supportsExceptionFilterOptions","convertClientLineToDebugger","convertDebuggerLineToClient","convertClientColumnToDebugger","convertDebuggerColumnToClient","convertClientPathToDebugger","clientPath","uri2path","path2uri","convertDebuggerPathToClient","debuggerPath","platform","test","toLowerCase","substr","replace","encodeURI","uri","URL","pathname","toString","sourceUri","s","decodeURIComponent","excludePII","_formatPIIRegexp","match","paramName","hasOwnProperty","Handles","startHandle","START_HANDLE","_handleMap","Map","_nextHandle","reset","create","handle","set","get","dflt","InternalLogger","fs","logger_1","getFormattedTimeString","d","Date","_padZeroes","String","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","minDesiredLength","numberToPad","repeat","slice","logCallback","isServer","beforeExitCallback","dispose","_logCallback","_logToConsole","_minLogLevel","LogLevel","Warn","disposeCallback","signal","code","setup","options","consoleMinLogLevel","_prependTimestamp","prependTimestamp","logFilePath","isAbsolute","handleError","err","sendLog","Error","promises","mkdir","dirname","recursive","log","_logFileStream","createWriteStream","logDateTime","setupShutdownListeners","timeAndDateStamp","getUTCFullYear","getUTCMonth","getUTCDate","Verbose","removeShutdownListeners","removeListener","Promise","resolve","end","level","Stop","logFn","console","warn","trimLastNewline","write","endsInNewline","event","LogOutputEvent","logger","Logger","internalLogger_1","debugSession_1","_pendingLogQ","Log","_write","verbose","_currentLogger","disposeP","push","_logFilePath","_logFilePathFromInit","then","logQ","forEach","item","init","logToConsole","str","LoggingDebugSession","obsolete_logFilePath","inStream","outStream","sendEvent","objectToLog","doNotLogOutput","JSON","stringify","enumerable","loggingDebugSession_1","handles_1","Message","type","seq","request_seq","ee","Emitter","_event","listener","thisArg","result","_listener","_this","fire","call","hasListener","EventEmitter","_sendMessage","_sequence","_pendingRequests","onDidSendMessage","handleMessage","clb","delete","_writableStream","_rawData","Buffer","alloc","_handleData","_emitEvent","resume","stop","_send","keys","timer","clearTimeout","emit","typ","json","byteLength","concat","_contentLength","parse","idx","indexOf","TWO_CRLF","lines","split","pair","Net","port","argv","val","index","array","portMatch","exec","parseInt","createServer","socket","session","listen","stdin","stdout","context","factory","subscriptions","vscode","commands","registerCommand","resource","targetResource","window","activeTextEditor","document","debug","startDebugging","program","fsPath","noDebug","stopOnEntry","showInputBox","placeHolder","provider","AmalgamConfigurationProvider","registerDebugConfigurationProvider","provideDebugConfigurations","folder","workingDirectory","DebugConfigurationProviderTriggerKind","Dynamic","languages","registerEvaluatableExpressionProvider","provideEvaluatableExpression","position","VARIABLE_REGEXP","lineAt","matches","top","groups","varRange","Range","QUOTE_REGEXP","qMatches","contains","COMMENT_REGEXP","cMatches","EvaluatableExpression","registerDebugAdapterDescriptorFactory","resolveDebugConfiguration","config","editor","languageId","showInformationMessage","RuntimeError","setPrototypeOf","prototype","createDebugAdapterDescriptor","DebugAdapterInlineImplementation","AmalgamDebugSession","executable","cwd","workspaceFolder","DebugAdapterExecutable","RuntimeEvent","RuntimeStackType","RuntimeBreakpointType","RuntimeVariable","_value","_lazy","lazy","RuntimeLabel","RuntimeEntity","AmalgamRuntime","isRunning","cp","pid","currentThread","_currentThread","ignoreOutput","outputBuffer","debugStarted","NotifySubject","commandDone","breakpoints","breakpointId","DEFAULT_THREAD_ID","matchers","stackFrameComment","stackFrameOpcode","breakpointAction","breakpointLine","expression","commandQueue","queue","async","task","RuntimeNotStarted","aborted","RuntimeCommandCancelled","activeCommand","join","wait","pause","getExecutableName","postfix","launchOpts","spawnAmalgam","handleOutput","stderr","verifyBreakpoints","STOP_ON_ENTRY","continue","terminate","kill","cancel","spawn","quit","sendCommand","finish","CONTINUE","STOP_ON_BREAKPOINT","step","instruction","STOP_ON_STEP","stepIn","stepOut","frames","getVariables","values","Array","from","Set","sort","all","map","v","getVariable","asLabel","getVariableRaw","getVariablePreview","setVariable","variable","getLabels","getEntities","getEntity","evaluate","getThreadIds","threads","clearBreakpoints","bps","br","clear","setBreakPoint","bp","action","BREAKPOINT_VALIDATED","allArgs","unshift","child","shell","env","VSCODE_DEBUG_SESSION","setDefaultEncoding","setEncoding","END","AbortSignal","reject","InvalidRuntimeResponse","OUTPUT","replaceAll","outputToDebugConsole","reg","RegExp","eot","substring","thread","paused","notify","expressionResult","varsResult","LINE","brMatches","sectionReg","brs","file","INTERPRET_NODE","frameReg","frameMatches","opcodes","opcode","stackFrame","reverse","DEFAULT_EXECUTABLE_DIRS","configurationDone","cancellationTokens","_variableHandles","parentSession","runtime","allThreadsStopped","STOP_ON_EXCEPTION","exception","evt","createSource","granularity","sourcePath","convertPathToRuntime","clientBreakpoints","allBreakpoints","stk","stackFrames","f","sf","startsWith","presentationHint","totalFrames","reply","rv","cmd","expr","convertDebuggerVariableToClient","scopes","vs","cancelToken","AbortController","isArray","container","find","requestId","abort","supportSuspendDebuggee","completionTriggerCharacters","targets","detail","logging","getExecutablePath","expandUserHome","programUri","Uri","workspaceUri","workspace","getWorkspaceFolder","runtimeArgs","tracefile","startArgs","terminateDebuggee","threadIds","filePath","executableName","dir","basename","convertPathToRelative","relative","win32","normalize","charAt","toUpperCase","dapVariable","evaluateName","homedir","NotifyWaiter","resolveFunc","cancelFunc","_resolved","resolved","waiters","waiter","remove","pos","splice","registerDocumentSymbolProvider","scheme","language","AmalgamDocumentSymbolProvider","provideDocumentSymbols","token","symbols","symbol","prevSymbol","updatePrevSymbol","range","Position","lineCount","isCancellationRequested","kind","checkType","SymbolKind","Function","symbolRange","character","selectionRange","DocumentSymbol","defaultKind","Number","Boolean","outputLine","sourceLength","logLine","pop","ts","toISOString","padEnd","logText","txt","t","m","forceString","x","info","outputChannel","createOutputChannel","appendLine","makeVsCodeLogger","require","apply","fn","callArgs","initialParams","callback","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","wrap","defer","setImmediate$1","asyncify","func","isAsync","handlePromise","promise","invokeCallback","Symbol","toStringTag","wrapAsync","asyncFn","awaitify","arity","cbArgs","applyEach","eachfn","fns","that","_asyncMap","arr","iteratee","results","counter","_iteratee","_","iterCb","isArrayLike","breakLoop","once","wrapper","callFn","assign","onlyOnce","asyncEachOfLimit","generator","limit","done","canceled","awaiting","running","replenish","next","iterDone","iterateeCallback","catch","eachOfLimit","obj","RangeError","asyncIterator","isAsyncIterable","nextElem","coll","len","key","createArrayIterator","okeys","iterator","getIterator","createES2015Iterator","createIterator","looping","elem","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","applyEach$1","eachOfSeries$1","mapSeries$1","applyEachSeries","PROMISE_SYMBOL","promiseCallback","res","rej","auto","tasks","concurrency","numTasks","runningTasks","hasError","listeners","readyTasks","readyToCheck","uncheckedDependencies","enqueueTask","taskCallback","safeResults","rkey","processQueue","taskFn","runTask","shift","getDependents","taskName","dependencies","remainingDependencies","dependencyName","taskListeners","dependent","checkForDeadlocks","FN_ARGS","ARROW_FN_ARGS","FN_ARG_SPLIT","FN_ARG","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","string","stripped","endBlockComment","endIndex","stripComments","arg","trim","parseParams","taskCb","newArgs","DLL","head","tail","removeLink","node","prev","empty","insertAfter","newNode","insertBefore","setInitial","toArray","cur","testFn","curr","dll","worker","payload","_worker","numRunning","workersList","events","drain","saturated","unsaturated","off","handler","filter","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","q","started","_createTaskItem","_tasks","_createCB","l","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","datum","pushAsync","unshiftAsync","Math","min","defineProperties","writable","cargo","cargo$1","reduce$1","memo","functions","_functions","newargs","nextargs","compose","mapLimit$1","concatLimit$1","mapResults","concat$1","concatSeries$1","constant","ignoredArgs","_createTester","check","getResult","testResult","testPassed","detect$1","bool","detectLimit$1","detectSeries$1","consoleFunc","resultArgs","doWhilst$1","_fn","_test","truth","doUntil","_withoutIndex","each","eachLimit$2","eachSeries$1","ensureAsync","sync","innerArgs","every$1","everyLimit$1","everySeries$1","filterArray","truthValues","filterGeneric","a","b","_filter","filter$1","filterLimit$1","filterSeries$1","forever$1","errback","groupByLimit$1","groupBy","groupBySeries","mapValuesLimit$1","newObj","mapValues","mapValuesSeries","memoize","hasher","queues","memoized","unmemoized","parallel","parallel$1","parallelLimit","queue$1","items","Heap","heap","pushCount","MIN_SAFE_INTEGER","percUp","p","smaller","parent","percDown","j","y","priority","priorityQueue","createDataItems","race$1","TypeError","reduceRight","reversed","reflect","reflectCallback","retVal","reflectAll","reject$2","rejectLimit$1","rejectSeries$1","constant$1","DEFAULT_TIMES","DEFAULT_INTERVAL","retry","opts","times","intervalFunc","acc","interval","errorFilter","parseTimes","_task","attempt","retryAttempt","retryable","series","some$1","someLimit$1","someSeries$1","sortBy$1","criteria","comparator","left","right","milliseconds","timedOut","timesLimit","size","n","timesSeries","transform","accumulator","k","tryEach$1","unmemoize","whilst$1","rest","until","waterfall$1","taskIndex","nextTask","cargoQueue","concatLimit","concatSeries","detect","detectLimit","detectSeries","doWhilst","eachLimit","eachOf","eachOfSeries","eachSeries","every","everyLimit","everySeries","filterLimit","filterSeries","forever","groupByLimit","mapLimit","mapSeries","mapValuesLimit","race","reduce","rejectLimit","rejectSeries","some","someLimit","someSeries","sortBy","tryEach","waterfall","whilst","allLimit","allSeries","any","anyLimit","anySeries","findLimit","findSeries","flatMap","flatMapLimit","flatMapSeries","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","during","doDuring","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","o","prop","r","runMode","activateDebug","InlineDebugAdapterFactory","ExternalDebugAdapterFactory","activateLanguage"],"sourceRoot":""}